{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "初始数据&全局变量"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from utils import *\n",
    "from keras.datasets import mnist\n",
    "from keras.layers import Input\n",
    "import math\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.misc import imsave\n",
    "import os\n",
    "import cv2\n",
    "\n",
    "import random\n",
    "from collections import defaultdict\n",
    "\n",
    "import numpy as np\n",
    "from keras import backend as K\n",
    "from keras.models import Model\n",
    "from Model1 import Model1\n",
    "from Model2 import Model2\n",
    "from Model3 import Model3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.Initialization "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# input image dimensions\n",
    "img_rows, img_cols = 28, 28\n",
    "# the data, shuffled and split between train and test sets\n",
    "(_, _), (x_test, y_test) = mnist.load_data()\n",
    "\n",
    "x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n",
    "input_shape = (img_rows, img_cols, 1)\n",
    "\n",
    "#normalize data\n",
    "x_test = x_test.astype('float32')\n",
    "x_test /= 255\n",
    "\n",
    "# define input tensor as a placeholder\n",
    "input_tensor = Input(shape=input_shape)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[94mModel1 loaded\u001b[0m\n",
      "\u001b[94mModel2 loaded\u001b[0m\n",
      "\u001b[94mModel3 loaded\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "model1 = Model1(input_tensor=input_tensor)\n",
    "model2 = Model2(input_tensor=input_tensor)\n",
    "model3 = Model3(input_tensor=input_tensor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         (None, 28, 28, 1)         0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 28, 28, 4)         104       \n",
      "_________________________________________________________________\n",
      "block1_pool1 (MaxPooling2D)  (None, 14, 14, 4)         0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 14, 14, 12)        1212      \n",
      "_________________________________________________________________\n",
      "block2_pool1 (MaxPooling2D)  (None, 7, 7, 12)          0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 588)               0         \n",
      "_________________________________________________________________\n",
      "before_softmax (Dense)       (None, 10)                5890      \n",
      "_________________________________________________________________\n",
      "predictions (Activation)     (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 7,206\n",
      "Trainable params: 7,206\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         (None, 28, 28, 1)         0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 28, 28, 6)         156       \n",
      "_________________________________________________________________\n",
      "block1_pool1 (MaxPooling2D)  (None, 14, 14, 6)         0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 14, 14, 16)        2416      \n",
      "_________________________________________________________________\n",
      "block2_pool1 (MaxPooling2D)  (None, 7, 7, 16)          0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "fc1 (Dense)                  (None, 84)                65940     \n",
      "_________________________________________________________________\n",
      "before_softmax (Dense)       (None, 10)                850       \n",
      "_________________________________________________________________\n",
      "predictions (Activation)     (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 69,362\n",
      "Trainable params: 69,362\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         (None, 28, 28, 1)         0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 28, 28, 6)         156       \n",
      "_________________________________________________________________\n",
      "block1_pool1 (MaxPooling2D)  (None, 14, 14, 6)         0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 14, 14, 16)        2416      \n",
      "_________________________________________________________________\n",
      "block2_pool1 (MaxPooling2D)  (None, 7, 7, 16)          0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "fc1 (Dense)                  (None, 120)               94200     \n",
      "_________________________________________________________________\n",
      "fc2 (Dense)                  (None, 84)                10164     \n",
      "_________________________________________________________________\n",
      "before_softmax (Dense)       (None, 10)                850       \n",
      "_________________________________________________________________\n",
      "predictions (Activation)     (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 107,786\n",
      "Trainable params: 107,786\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model3.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.parent_generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def parent_generator(seed, num_parents = 100, num_parent_mutations = 50):\n",
    "    #input : seed  (28，28，1）\n",
    "    #       num_parents   父亲数量\n",
    "    #       num_parent_mutations   修改多少像素\n",
    "    #return: generated_parent_solutions (num_parents, 28,28,1)\n",
    "    # global variables : num_parents,\n",
    "    generated_parent_solutions = np.empty((num_parents,28,28,1))\n",
    "    \n",
    "    # 修改像素的范围\n",
    "    pixil_range = []\n",
    "    for a in range(0,101,1):\n",
    "        a = a/100.0\n",
    "        pixil_range.append(a)\n",
    "    \n",
    "    for i in range(0,num_parents,1):\n",
    "        seed_copy = seed.copy() #(28,28,1)\n",
    "        mutation_positions = random.sample(range(0,28*28),num_parent_mutations)\n",
    "        for j in mutation_positions:\n",
    "            #create a float number to represent the change of pixl\n",
    "            seed_copy[j//28][j%28][0] = random.sample(pixil_range,1)[0]  \n",
    "        generated_parent_solutions[i,...] = seed_copy\n",
    "    return generated_parent_solutions #(num_parents, 28,28,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.offspring_generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def offspring_generator(parent_solutions, p_crossover, p_mutation, p_deletion, original_img, num_mutation_pixil = 50,num_deletion_pixil = 50):\n",
    "    # input: parent_solutions(#parent_solutions, 28,28,1)\n",
    "    #        original_img （28，28，1）\n",
    "    # return offspring_solutions (#parent_solutions, 28,28,1)\n",
    "    \n",
    "    #初始化offspring_solutions\n",
    "    offspring_solutions = np.empty((parent_solutions.shape[0],28,28,1))\n",
    "    num_crossover = int(len(parent_solutions)*p_crossover)\n",
    "    num_mutations = int(len(parent_solutions)*p_mutation)\n",
    "    num_deletion = parent_solutions.shape[0] - num_crossover - num_mutations\n",
    "    \n",
    "    \n",
    "    crossover_solutions = np.empty((num_crossover,28,28,1))\n",
    "    mutation_solutions = np.empty((num_mutations,28,28,1))\n",
    "    deleted_solutions = np.empty((num_deletion,28,28,1))\n",
    "    \n",
    "    \n",
    "    for i in range(num_crossover):\n",
    "        \n",
    "        parent1, parent2 = random.sample(list(parent_solutions),2) #both(28,28,1) \n",
    "        crossover_solutions[i,...] = crossover_generator(parent1,parent2)\n",
    "        #crossover_solutions.append(crossover_generator(parent1,parent2)) \n",
    "    \n",
    "    for i in range(num_mutations):\n",
    "        parent = random.choice(parent_solutions) #(28,28,1)\n",
    "        #mutation_solutions.append(mutation_generator(parent))\n",
    "        mutation_solutions[i,...] = mutation_generator(parent, num_mutation_pixil)\n",
    "    \n",
    "    for i in range(num_deletion):\n",
    "        parent = random.choice(parent_solutions) #(28,28,1)\n",
    "        deleted_solutions[i,...] = deletion_generator(parent, original_img, num_deletion_pixil)#------------------------------------\n",
    "        \n",
    "    offspring_solutions = np.concatenate((crossover_solutions, mutation_solutions, deleted_solutions), axis = 0)\n",
    "    \n",
    "        \n",
    "        \n",
    "        \n",
    "    return offspring_solutions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## crossover function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def crossover_generator(parent1, parent2):\n",
    "    #input: both(28,28,1)\n",
    "    #output: (28,28,1)\n",
    "    # parent1 head， parent2 tail\n",
    "    \n",
    "    #reshape parent1&parent2\n",
    "    parent1 = parent1.reshape(28*28)\n",
    "    parent2 = parent2.reshape(28*28)\n",
    "    \n",
    "    #create a new crossover_solution\n",
    "    crossover_solution = np.zeros(28*28)\n",
    "    for i in range(28*28):\n",
    "        if i < int(28*28/2):\n",
    "            crossover_solution[i] = parent1[i]\n",
    "        else:\n",
    "            crossover_solution[i] = parent2[i]\n",
    "    return crossover_solution.reshape((28,28)).reshape((28,28,1))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "392.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "28*28/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "parent1 = random.choice(x_test)\n",
    "plt.imshow(parent1.reshape(28*28).reshape((28,28)), cmap = plt.cm.binary)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP8AAAD8CAYAAAC4nHJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADn1JREFUeJzt3X+sVPWZx/HPI7Zq+GHEe7WEwl4XUWrUpetINmo2yka0hgQbU4REwyZNqUlNtoq4QDTwz0aySivRTQ0sBExa2xpwwUTdItG41WIY1FS7rIvRS4vcwCU0KiaI4rN/3MPmFu985zLnnDlzed6vhMzMec6PJ8P93DMz33Pna+4uAPGcUXUDAKpB+IGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gKMIPBHVmOw/W1dXlPT097TwkEEpvb68OHTpkw1k3V/jN7GZJqyWNkvTv7r4ytX5PT4/q9XqeQwJIqNVqw1635Zf9ZjZK0r9J+o6kyyTNN7PLWt0fgPbK855/hqT33P19dz8m6ZeS5hTTFoCy5Qn/REl/GvR4X7bsL5jZQjOrm1m9v78/x+EAFClP+If6UOErfx/s7mvcvebute7u7hyHA1CkPOHfJ2nSoMfflLQ/XzsA2iVP+HdKmmpmF5nZ1yXNk7S1mLYAlK3loT53/8LM7pb0nxoY6lvv7n8orDMApco1zu/uz0l6rqBeALQRl/cCQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gKMIPBEX4gaAIPxAU4QeCIvxAUIQfCIrwA0ERfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8IivADQRF+ICjCDwRF+IGgCD8QVK5Zes2sV9Inko5L+sLda0U0BaB8ucKfucHdDxWwHwBtxMt+IKi84XdJvzGzXWa2sIiGALRH3pf917r7fjO7QNI2M/sfd39l8ArZL4WFkjR58uSchwNQlFxnfnffn90elPSMpBlDrLPG3WvuXuvu7s5zOAAFajn8ZjbazMaeuC9plqR3imoMQLnyvOy/UNIzZnZiP79w9xcK6QpA6VoOv7u/L+lvCuwlrBdffDFZP3z4cLL+7LPPNqy99NJLLfV0wg033JBr+9mzZzes3X777bn2jXwY6gOCIvxAUIQfCIrwA0ERfiAowg8EZe7etoPVajWv1+ttO167vPBC+vKGdevWJeubN29O1sv8P2q27+w6jpaNGjWqYW369OnJbZ9//vlkvaurq6WeTme1Wk31en1Y/2mc+YGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gqCK+vTeExx9/vGFt6dKlyW2PHDmSrOcdS89jzJgxyfrEiROT9c8++yxZ37t3b8Parl27ktvOmjUrWX/11VeT9XPOOSdZj44zPxAU4QeCIvxAUIQfCIrwA0ERfiAowg8ExTh/5vjx48n6xo0bG9Y+/fTTXMduNta+ePHiZD11HcFtt92W3Pbcc89N1i+99NJk/ejRo8n6nXfe2bC2adOm5LZvvvlmsv7RRx8l64zzp3HmB4Ii/EBQhB8IivADQRF+ICjCDwRF+IGgmo7zm9l6SbMlHXT3y7Nl4yX9SlKPpF5Jc939z+W1Wb7UeLTU/G/PU6677rpkff369cn61KlTWz522c4+++xkfdKkSaUd++GHH07WV61aVdqxTwfDOfNvkHTzScuWSNru7lMlbc8eAxhBmobf3V+RdPikxXMknbjkbaOkWwvuC0DJWn3Pf6G790lSdntBcS0BaIfSP/Azs4VmVjezen9/f9mHAzBMrYb/gJlNkKTs9mCjFd19jbvX3L3W3d3d4uEAFK3V8G+VtCC7v0DSlmLaAdAuTcNvZk9J+p2kS81sn5l9X9JKSTea2R5JN2aPAYwgVubc7yer1Wper9fbdrxTcckllyTre/bsaXnf27dvT9ZnzpzZ8r6r1ux5afa85jFt2rRkPfWzNnr06KLb6Qi1Wk31en1YE0FwhR8QFOEHgiL8QFCEHwiK8ANBEX4gKL66O3PXXXcl6/fdd1/D2ty5c5PbjuShvGbTi2/Zkr6+K8/0482God99991kva+vr2Ht4osvbqmn0wlnfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8IinH+zIIFC5L1Rx99tGGt2XjzSLZ27dpk/f77729TJygaZ34gKMIPBEX4gaAIPxAU4QeCIvxAUIQfCIpx/sz555+frN9yyy0Naxs2bEhu+8gjjyTr9957b7J+xhnl/Y5++eWXk/UlS8qbgPmss85K1o8ePZpr/8eOHcu1/emOMz8QFOEHgiL8QFCEHwiK8ANBEX4gKMIPBNV0nN/M1kuaLemgu1+eLVsh6QeS+rPVlrn7c2U12QmeeOKJhrUpU6Ykt128eHGyfvjw4WR96dKlyfrYsWMb1j744IPktnfccUey/vnnnyfrzYwbN65hbcWKFclt77nnnlzHfvrppxvWli9fnmvfp4PhnPk3SLp5iOU/dffp2b/TOvjA6ahp+N39FUnpUxOAESfPe/67zez3ZrbezM4rrCMAbdFq+H8maYqk6ZL6JK1qtKKZLTSzupnV+/v7G60GoM1aCr+7H3D34+7+paS1kmYk1l3j7jV3r3V3d7faJ4CCtRR+M5sw6OF3Jb1TTDsA2mU4Q31PSbpeUpeZ7ZO0XNL1ZjZdkkvqlfTDEnsEUIKm4Xf3+UMsXldCLyNWs3H8ZvPMP/jgg8n6Qw89dMo9dYr584f68RnQ1dWVa9/NnlekcYUfEBThB4Ii/EBQhB8IivADQRF+ICi+ursNmk1jPXny5Fzb79u375R7OqHZcJmZJeuprzSXpMcee6xhbceOHcltm2nWG9I48wNBEX4gKMIPBEX4gaAIPxAU4QeCIvxAUIzzd4B58+Yl67NmzUrWX3vttYa1Xbt2tdTTCVdddVWyftNNNyXrZ57Z+Eest7e3lZaG7corryx1/yMdZ34gKMIPBEX4gaAIPxAU4QeCIvxAUIQfCIpx/hFg/Pjxyfrs2bNbqlXt2LFjpe7/ww8/LHX/Ix1nfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8Iquk4v5lNkvSkpG9I+lLSGndfbWbjJf1KUo+kXklz3f3P5bWKkejjjz9uWFu2bFmpxx43blyp+x/phnPm/0LSInf/lqS/k/QjM7tM0hJJ2919qqTt2WMAI0TT8Lt7n7u/kd3/RNJuSRMlzZG0MVtto6Rby2oSQPFO6T2/mfVI+rak1yVd6O590sAvCEkXFN0cgPIMO/xmNkbSJkk/dvfGb+S+ut1CM6ubWb2/v7+VHgGUYFjhN7OvaSD4P3f3zdniA2Y2IatPkHRwqG3dfY2719y91t3dXUTPAArQNPw2MBXqOkm73f0ng0pbJS3I7i+QtKX49gCUZTh/0nutpDslvW1mb2XLlklaKenXZvZ9SX+U9L1yWsRItnfv3oa1AwcO5Np3s+nFr7nmmlz7P901Db+7/1ZSo4nQ/6HYdgC0C1f4AUERfiAowg8ERfiBoAg/EBThB4Liq7uRy86dO5P1HTt2NKwNXD/WWLNx/KuvvjpZv+iii5L16DjzA0ERfiAowg8ERfiBoAg/EBThB4Ii/EBQjPMjl23btiXrq1evLu3Yo0aNylWPjjM/EBThB4Ii/EBQhB8IivADQRF+ICjCDwTFOD9ymTlzZrL+wAMPlHbsadOmlbbvCDjzA0ERfiAowg8ERfiBoAg/EBThB4Ii/EBQTcf5zWySpCclfUPSl5LWuPtqM1sh6QeS+rNVl7n7c2U1is50xRVXJOsrV65sWFuyZEmuYy9atCjX9tEN5yKfLyQtcvc3zGyspF1mduIbHH7q7o+U1x6AsjQNv7v3SerL7n9iZrslTSy7MQDlOqX3/GbWI+nbkl7PFt1tZr83s/Vmdl6DbRaaWd3M6v39/UOtAqACww6/mY2RtEnSj939Y0k/kzRF0nQNvDJYNdR27r7G3WvuXuvu7i6gZQBFGFb4zexrGgj+z919syS5+wF3P+7uX0paK2lGeW0CKFrT8NvAVKrrJO12958MWj5h0GrflfRO8e0BKIs1mwbZzK6T9F+S3tbAUJ8kLZM0XwMv+V1Sr6QfZh8ONlSr1bxer+dsGUAjtVpN9Xo9Pfd5Zjif9v9W0lA7Y0wfGMG4wg8IivADQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gKMIPBEX4gaAIPxBU07/nL/RgZv2S9g5a1CXpUNsaODWd2lun9iXRW6uK7O2v3H1Y35fX1vB/5eBmdXevVdZAQqf21ql9SfTWqqp642U/EBThB4KqOvxrKj5+Sqf21ql9SfTWqkp6q/Q9P4DqVH3mB1CRSsJvZjeb2btm9p6Z5ZuqtWBm1mtmb5vZW2ZW6feMZ9OgHTSzdwYtG29m28xsT3Y75DRpFfW2wsw+zJ67t8zslop6m2RmL5nZbjP7g5n9U7a80ucu0Vclz1vbX/ab2ShJ/yvpRkn7JO2UNN/d/7utjTRgZr2Sau5e+Ziwmf29pCOSnnT3y7Nl/yrpsLuvzH5xnufu/9whva2QdKTqmZuzCWUmDJ5ZWtKtkv5RFT53ib7mqoLnrYoz/wxJ77n7++5+TNIvJc2poI+O5+6vSDp80uI5kjZm9zdq4Ien7Rr01hHcvc/d38jufyLpxMzSlT53ib4qUUX4J0r606DH+9RZU367pN+Y2S4zW1h1M0O48MTMSNntBRX3c7KmMze300kzS3fMc9fKjNdFqyL8Q83+00lDDte6+99K+o6kH2UvbzE8w5q5uV2GmFm6I7Q643XRqgj/PkmTBj3+pqT9FfQxJHffn90elPSMOm/24QMnJknNbg9W3M//66SZm4eaWVod8Nx10ozXVYR/p6SpZnaRmX1d0jxJWyvo4yvMbHT2QYzMbLSkWeq82Ye3SlqQ3V8gaUuFvfyFTpm5udHM0qr4ueu0Ga8rucgnG8p4VNIoSevd/V/a3sQQzOyvNXC2lwYmMf1Flb2Z2VOSrtfAX30dkLRc0n9I+rWkyZL+KOl77t72D94a9Ha9TnHm5pJ6azSz9Ouq8LkrcsbrQvrhCj8gJq7wA4Ii/EBQhB8IivADQRF+ICjCDwRF+IGgCD8Q1P8BnNkhKxEiBL4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "parent2 = random.choice(x_test)\n",
    "plt.imshow(parent2.reshape(28*28).reshape((28,28)), cmap = plt.cm.binary)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP8AAAD8CAYAAAC4nHJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADrpJREFUeJzt3X+sVPWZx/HPI1A1FhIIF0sE9rLEyOKP2nUkG9ysrka0igFjqmDcsEkj/lGTrfhjETXwhxvJZmklZsVQJWJsaWtaFY3ZLTEarSyGgZCKZXc1eKn8yOUSNNg/FH88+8c9bK5yz/cMM2fmzOV5vxIyM+c5Z86TCZ97ZuZ75nzN3QUgntOqbgBANQg/EBThB4Ii/EBQhB8IivADQRF+ICjCDwRF+IGgRndyZxMnTvTe3t5O7hIIpa+vT4cPH7ZG1m0p/GZ2raQ1kkZJetLdV6XW7+3tVb1eb2WXABJqtVrD6zb9tt/MRkn6d0nflzRL0iIzm9Xs8wHorFY+88+W9L6773H3Y5J+KWl+OW0BaLdWwn+OpA+HPN6XLfsaM1tiZnUzqw8MDLSwOwBlaiX8w32pcMLvg919nbvX3L3W09PTwu4AlKmV8O+TNHXI4ymSDrTWDoBOaSX82ySda2bTzexbkhZK2lROWwDaremhPnf/wszulPSfGhzqW+/u75bWGYC2ammc391fkfRKSb0A6CBO7wWCIvxAUIQfCIrwA0ERfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8IivADQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gqI5O0Y3h7dixI1l/8sknk/W1a9fm1hYsWJDcdu7cucl6q2bNyp+79fLLL2/rvpHGkR8IivADQRF+ICjCDwRF+IGgCD8QFOEHgmppnN/M+iR9IulLSV+4e62Mpk41O3fuTNavv/76ZL2/vz9ZN7Pc2osvvpjctqjeqvHjx+fWisb5ly5dmqxPmTIlWe/t7U3WoyvjJJ+/d/fDJTwPgA7ibT8QVKvhd0m/M7PtZrakjIYAdEarb/svc/cDZjZJ0mYz+293f2PoCtkfhSWSNG3atBZ3B6AsLR353f1AdntI0vOSZg+zzjp3r7l7raenp5XdAShR0+E3s7PMbOzx+5LmStpVVmMA2quVt/1nS3o+G2YaLekX7v4fpXQFoO2aDr+775H03RJ7GbGKxvFvvPHGZL1oHH8kO3LkSG7thRdeSG5bVD///POT9VtvvTW3ds899yS3HTNmTLJ+KmCoDwiK8ANBEX4gKMIPBEX4gaAIPxAUl+4uweLFi5P1vXv3dqiTWN59991k/YEHHsitFQ2vPvroo031NJJw5AeCIvxAUIQfCIrwA0ERfiAowg8ERfiBoBjnP8XNnDkzWS+6dPcZZ5yRrG/cuDFZf/PNN3NrH330UXLbLVu2JOutePzxx5N1d0/WV69enayPHt390eLIDwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBWdF4ZplqtZrX6/WO7a9ML7/8cm7ttttuS2579OjRstv5mkmTJuXW3nrrreS2M2bMKLudhqUu6y1Jr732WrJ+++23J+sff/zxSffUqD179iTrVU0PXqvVVK/X8+dsH4IjPxAU4QeCIvxAUIQfCIrwA0ERfiAowg8EVfijYzNbL2mepEPufkG2bIKkX0nqldQn6WZ3T/84e4T78MMPc2vtHscvsmjRotxaleP4RSZMmJCs33TTTcn6e++9l6wvX778pHtq1A033JCsv/TSS8l6VecBDNXIkf9pSdd+Y9kySa+6+7mSXs0eAxhBCsPv7m9I+uapWPMlbcjub5C0oOS+ALRZs5/5z3b3g5KU3eafXwqgK7X9Cz8zW2JmdTOrDwwMtHt3ABrUbPj7zWyyJGW3h/JWdPd17l5z91pPT0+TuwNQtmbDv0nS8alpF0tKXwIWQNcpDL+ZbZT0X5LOM7N9ZvZDSaskXW1m70m6OnsMYATh9/wNOvPMM3Nrn332WQc7OdF5552XW9u9e3cHO+msotd906ZNubVbbrml7Ha+Zvbs2cn61q1b27Jffs8PoBDhB4Ii/EBQhB8IivADQRF+IKjun0e4S3z66ae5NbOGRlbapq+vL7f27LPPJrctuux4Nzv99NOT9auuuiq3NmfOnOS2rU4Pnvr/0i048gNBEX4gKMIPBEX4gaAIPxAU4QeCIvxAUIzznwJSP23dv39/BzvpLqlLg48fP76DnXQnjvxAUIQfCIrwA0ERfiAowg8ERfiBoAg/EBTj/A264447cmtPP/10ctuHH344WV+6dGmyftpp7fsb/frrryfr11xzTbL++eefN73vot/jF/0mvug6Crt27cqtFU2hHQFHfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8IqnCc38zWS5on6ZC7X5AtWynpdkkD2WrL3f2VdjXZDZ544onc2owZM5Lb3nvvvcn6kSNHkvX7778/WR87dmxu7YMPPkhuW3Td/lbG8SVp3LhxubWVK1cmt73rrrta2vdzzz2XW1uxYkVLz30qaOTI/7Ska4dZ/lN3vzj7d0oHHzgVFYbf3d+QlD40ARhxWvnMf6eZ/cHM1psZ10QCRphmw79W0gxJF0s6KGl13opmtsTM6mZWHxgYyFsNQIc1FX5373f3L939K0k/kzQ7se46d6+5e62np6fZPgGUrKnwm9nkIQ9vlJT/8ykAXamRob6Nkq6QNNHM9klaIekKM7tYkkvqk5T/e1cAXakw/O6+aJjFT7WhlxGraBzf3ZP1hx56KFl/5JFHTrqnbrFo0XD/fQZNnDixpecuel2Rxhl+QFCEHwiK8ANBEX4gKMIPBEX4gaC4dHcH3Hfffcn6tGnTWtp+3759J93TcUXDZUWXx77uuuuS9cceeyy3tnXr1uS2RYp6QxpHfiAowg8ERfiBoAg/EBThB4Ii/EBQhB8IinH+LrBw4cJkfe7cucn6li1bcmvbt29vqqfjLrnkkmS9aArv0aPz/4v19fU101LDLrroorY+/0jHkR8IivADQRF+ICjCDwRF+IGgCD8QFOEHgmKcfwSYMGFCsj5v3rymalU7duxYW59///79bX3+kY4jPxAU4QeCIvxAUIQfCIrwA0ERfiAowg8EVTjOb2ZTJT0j6TuSvpK0zt3XmNkESb+S1CupT9LN7v5R+1rFSHT06NHc2vLly9u673HjxrX1+Ue6Ro78X0i6293/StLfSPqRmc2StEzSq+5+rqRXs8cARojC8Lv7QXffkd3/RNJuSedImi9pQ7baBkkL2tUkgPKd1Gd+M+uV9D1Jb0s6290PSoN/ICRNKrs5AO3TcPjN7NuSfiPpx+6e/0HuxO2WmFndzOoDAwPN9AigDRoKv5mN0WDwf+7uv80W95vZ5Kw+WdKh4bZ193XuXnP3Wk9PTxk9AyhBYfhtcCrUpyTtdvefDCltkrQ4u79Y0ovltwegXRr5Se9lkv5B0jtmtjNbtlzSKkm/NrMfSvqTpB+0p0WMZHv37s2t9ff3t/TcRdOLz5kzp6XnP9UVht/dfy8pbyL0q8ptB0CncIYfEBThB4Ii/EBQhB8IivADQRF+ICgu3Y2WbNu2LVnfunVrbm3w/LF8ReP4l156abI+ffr0ZD06jvxAUIQfCIrwA0ERfiAowg8ERfiBoAg/EBTj/GjJ5s2bk/U1a9a0bd+jRo1qqR4dR34gKMIPBEX4gaAIPxAU4QeCIvxAUIQfCIpxfrTkyiuvTNYffPDBtu175syZbXvuCDjyA0ERfiAowg8ERfiBoAg/EBThB4Ii/EBQheP8ZjZV0jOSviPpK0nr3H2Nma2UdLukgWzV5e7+SrsaRXe68MILk/VVq1bl1pYtW9bSvu++++6Wto+ukZN8vpB0t7vvMLOxkrab2fErOPzU3f+tfe0BaJfC8Lv7QUkHs/ufmNluSee0uzEA7XVSn/nNrFfS9yS9nS2608z+YGbrzWx8zjZLzKxuZvWBgYHhVgFQgYbDb2bflvQbST9296OS1kqaIeliDb4zWD3cdu6+zt1r7l7r6ekpoWUAZWgo/GY2RoPB/7m7/1aS3L3f3b90968k/UzS7Pa1CaBsheG3walUn5K0291/MmT55CGr3ShpV/ntAWgXK5oG2cz+VtKbkt7R4FCfJC2XtEiDb/ldUp+kO7IvB3PVajWv1+sttgwgT61WU71eT899nmnk2/7fSxruyRjTB0YwzvADgiL8QFCEHwiK8ANBEX4gKMIPBEX4gaAIPxAU4QeCIvxAUIQfCIrwA0ERfiAowg8EVfh7/lJ3ZjYgae+QRRMlHe5YAyenW3vr1r4kemtWmb39hbs3dL28job/hJ2b1d29VlkDCd3aW7f2JdFbs6rqjbf9QFCEHwiq6vCvq3j/Kd3aW7f2JdFbsyrprdLP/ACqU/WRH0BFKgm/mV1rZv9jZu+bWWtTtZbMzPrM7B0z22lmlV5nPJsG7ZCZ7RqybIKZbTaz97LbYadJq6i3lWa2P3vtdprZdRX1NtXMXjOz3Wb2rpn9U7a80tcu0Vclr1vH3/ab2ShJ/yvpakn7JG2TtMjd/9jRRnKYWZ+kmrtXPiZsZn8n6c+SnnH3C7Jl/yrpiLuvyv5wjnf3f+6S3lZK+nPVMzdnE8pMHjqztKQFkv5RFb52ib5uVgWvWxVH/tmS3nf3Pe5+TNIvJc2voI+u5+5vSDryjcXzJW3I7m/Q4H+ejsvprSu4+0F335Hd/0TS8ZmlK33tEn1VoorwnyPpwyGP96m7pvx2Sb8zs+1mtqTqZoZx9vGZkbLbSRX3802FMzd30jdmlu6a166ZGa/LVkX4h5v9p5uGHC5z97+W9H1JP8re3qIxDc3c3CnDzCzdFZqd8bpsVYR/n6SpQx5PkXSggj6G5e4HsttDkp5X980+3H98ktTs9lDF/fy/bpq5ebiZpdUFr103zXhdRfi3STrXzKab2bckLZS0qYI+TmBmZ2VfxMjMzpI0V903+/AmSYuz+4slvVhhL1/TLTM3580srYpfu26b8bqSk3yyoYxHJY2StN7d/6XjTQzDzP5Sg0d7aXAS019U2ZuZbZR0hQZ/9dUvaYWkFyT9WtI0SX+S9AN37/gXbzm9XaGTnLm5Tb3lzSz9tip87cqc8bqUfjjDD4iJM/yAoAg/EBThB4Ii/EBQhB8IivADQRF+ICjCDwT1fxgxPFr8pasPAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "child = crossover_generator(parent1, parent2)\n",
    "plt.imshow(child.reshape(28*28).reshape((28,28)), cmap = plt.cm.binary)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# mutation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mutation_generator(parent, num_mutations = 10):\n",
    "    #input: parent of (28,28,1)\n",
    "    #return: mutated img (28,28,1)\n",
    "    # mutate the parent img by num_mutations pixls\n",
    "    \n",
    "    \n",
    "    # 修改像素的范围\n",
    "    pixil_range = []\n",
    "    for a in range(0,101,1):\n",
    "        a = a/100.0\n",
    "        pixil_range.append(a)\n",
    "    #修改的位置\n",
    "    mutation_positions = random.sample(range(0,28*28,1), num_mutations)\n",
    "    \n",
    "    #reshape 数据\n",
    "    parent_copy = parent.copy() #(28,28,1)\n",
    "    \n",
    "    #修改数据\n",
    "    for i in mutation_positions:\n",
    "        parent_copy[i//28][i%28][0] = random.sample(pixil_range,1)[0]\n",
    "    \n",
    "    return parent_copy\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "0.01\n",
      "0.02\n",
      "0.03\n",
      "0.04\n",
      "0.05\n",
      "0.06\n",
      "0.07\n",
      "0.08\n",
      "0.09\n",
      "0.1\n",
      "0.11\n",
      "0.12\n",
      "0.13\n",
      "0.14\n",
      "0.15\n",
      "0.16\n",
      "0.17\n",
      "0.18\n",
      "0.19\n",
      "0.2\n",
      "0.21\n",
      "0.22\n",
      "0.23\n",
      "0.24\n",
      "0.25\n",
      "0.26\n",
      "0.27\n",
      "0.28\n",
      "0.29\n",
      "0.3\n",
      "0.31\n",
      "0.32\n",
      "0.33\n",
      "0.34\n",
      "0.35\n",
      "0.36\n",
      "0.37\n",
      "0.38\n",
      "0.39\n",
      "0.4\n",
      "0.41\n",
      "0.42\n",
      "0.43\n",
      "0.44\n",
      "0.45\n",
      "0.46\n",
      "0.47\n",
      "0.48\n",
      "0.49\n",
      "0.5\n",
      "0.51\n",
      "0.52\n",
      "0.53\n",
      "0.54\n",
      "0.55\n",
      "0.56\n",
      "0.57\n",
      "0.58\n",
      "0.59\n",
      "0.6\n",
      "0.61\n",
      "0.62\n",
      "0.63\n",
      "0.64\n",
      "0.65\n",
      "0.66\n",
      "0.67\n",
      "0.68\n",
      "0.69\n",
      "0.7\n",
      "0.71\n",
      "0.72\n",
      "0.73\n",
      "0.74\n",
      "0.75\n",
      "0.76\n",
      "0.77\n",
      "0.78\n",
      "0.79\n",
      "0.8\n",
      "0.81\n",
      "0.82\n",
      "0.83\n",
      "0.84\n",
      "0.85\n",
      "0.86\n",
      "0.87\n",
      "0.88\n",
      "0.89\n",
      "0.9\n",
      "0.91\n",
      "0.92\n",
      "0.93\n",
      "0.94\n",
      "0.95\n",
      "0.96\n",
      "0.97\n",
      "0.98\n",
      "0.99\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "for a in range(0,101,1):\n",
    "    a = a/100.0\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# deletion_generator function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def deletion_generator(parent, original_solution, num_deletion = 10):\n",
    "    #input: parent (28,28,1)\n",
    "    #      original_solution (28,28,1)\n",
    "    #return: one deletion_solution (28,28,1)\n",
    "    #delete some pixl changes \n",
    "    \n",
    "    #create deletion set\n",
    "    deletion_set = []\n",
    "    for i in range(28*28):\n",
    "        if parent[i//28][i%28][0] != original_solution[i//28][i%28][0]:\n",
    "            deletion_set.append(i)\n",
    "    \n",
    "    #get deletion positions\n",
    "    if len(deletion_set)>=num_deletion:\n",
    "        deletion_positions = random.sample(deletion_set, num_deletion)\n",
    "    else:\n",
    "        deletion_positions = deletion_set\n",
    "    \n",
    "    #delete\n",
    "    for i in deletion_positions:\n",
    "        parent[i//28][i%28][0] = original_solution[i//28][i%28][0]\n",
    "    \n",
    "    return parent #(28,28,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.mapping into objective values ( #solutions, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将解转化成object值\n",
    "def ObjMapping(solutions, model1, model2, model3, original_solution, threshold = 0.5):\n",
    "    # compute neuron coverage, differences of behariors, mutation times to form the multi-objective functions\n",
    "    # the input is in shape (solution.shape[0],28,28,1) of solutions\n",
    "    # the input of original_solution is (28,28,1)\n",
    "    # return [(index, object1, object2, object3)] of len #solutions\n",
    "    \n",
    "    # create mapped_solutions with length equal to solution.shape[0]\n",
    "    # stores a list (index, object1, object2, object3)\n",
    "    #mapped_solutions = []\n",
    "    mapped_solutions = np.empty((solutions.shape[0],3))\n",
    "    \n",
    "    # compute each object values\n",
    "    for i, solution in enumerate(solutions):\n",
    "        #(28,28,1)\n",
    "        \n",
    "        #expand the solution with one dim and then compute the coverage\n",
    "        #默认计算Model1的\n",
    "        neuron_coverage = compute_neuron_coverage(solution, model1, threshold )\n",
    "        # compute the divergence\n",
    "        #divergence = compute_divergence_sensei(solution,model1,model2,model3) #--------------------------------\n",
    "        divergence = compute_divergence(solution,model1,model2,model3)\n",
    "        \n",
    "        #compute the #mutations\n",
    "        num_mutations = int(compute_mutations(solution, original_solution))\n",
    "        \n",
    "        mapped_solutions[i][0] = -neuron_coverage\n",
    "        #mapped_solutions[i][1] = -divergence  #----------------------------------------------------------------\n",
    "        mapped_solutions[i][1] = -divergence\n",
    "        mapped_solutions[i][2] = num_mutations\n",
    "        \n",
    "    \n",
    "    return mapped_solutions\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.1计算对图像修改的程度\n",
    "### compute how much we mutated an img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_mutations(new_solution, original_solution):\n",
    "    # input both in (28,28,1)\n",
    "    new_solution_copy = new_solution.reshape(28*28)\n",
    "    new_original_solution = original_solution.reshape(28*28)\n",
    "    num_mutations = 0\n",
    "    for i in range(0,len(new_solution_copy),1):\n",
    "        if new_solution_copy[i] != new_original_solution[i]:\n",
    "            num_mutations = num_mutations +1\n",
    "    return num_mutations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2计算模型表现的差异\n",
    "### compute the divergence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#计算divergence\n",
    "def compute_divergence(input_data, model1, model2, model3):\n",
    "    # 计算三个模型的预测差异\n",
    "    # 输入（28，28，1）\n",
    "    # 输出差异值， int类型\n",
    "    expanded_input = np.empty((1,28,28,1))\n",
    "    expanded_input[0,...] = input_data\n",
    "    label1, label2, label3 = model1.predict(expanded_input)[0], model2.predict(expanded_input)[0], model3.predict(expanded_input)[0]\n",
    "    divergence = 0\n",
    "    for i in range(0,10,1):\n",
    "        d12 = abs(label1[i]-label2[i])\n",
    "        d23 = abs(label2[i]-label3[i])\n",
    "        d13 = abs(label1[i]-label3[i])\n",
    "        divergence = divergence + d12+d23+d13\n",
    "    return divergence\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2.1compute the divergence---sensei's method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#计算divergence\n",
    "def compute_divergence_sensei(input_data, model1, model2, model3):\n",
    "    # 计算三个模型的预测差异\n",
    "    # 输入（28，28，1）\n",
    "    # 输出差异值， int类型\n",
    "    expanded_input = np.empty((1,28,28,1))\n",
    "    expanded_input[0,...] = input_data\n",
    "    label1, label2, label3 = model1.predict(expanded_input)[0], model2.predict(expanded_input)[0], model3.predict(expanded_input)[0]\n",
    "    \n",
    "    cos_theta = np.sum((label1-label2)*(label1-label3))/(d(label1,label2)*d(label1,label3))\n",
    "    \n",
    "    divergence = ((d(label1,label2)*d(label1,label3))*math.sqrt(1-math.pow(cos_theta,2)))/2.0\n",
    "    \n",
    "    return divergence\n",
    "\n",
    "def d(a,b):\n",
    "    #compute Euclidean distance\n",
    "    return math.sqrt(np.square(a+b).sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.3 compute coverage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#计算coverage\n",
    "def compute_neuron_coverage(input_data, model, threshold = 0):\n",
    "    # input (28,28,1)\n",
    "    \n",
    "    #expande the input_data\n",
    "    expanded_input_data = np.empty((1,28,28,1))\n",
    "    expanded_input_data[0,...] = input_data\n",
    "    #create a dictionary\n",
    "    model_layer_dict = defaultdict(bool)\n",
    "    #intialize the dict\n",
    "    for layer in model.layers:\n",
    "        if 'flatten' in layer.name or 'input' in layer.name:\n",
    "            continue\n",
    "        for index in range(layer.output_shape[-1]):\n",
    "            model_layer_dict[(layer.name, index)] = False\n",
    "            \n",
    "    layer_names = [layer.name for layer in model.layers if 'flatten' not in layer.name and 'input' not in layer.name]\n",
    "\n",
    "    #update table\n",
    "    intermediate_layer_model = Model(inputs=model.input,\n",
    "                                     outputs=[model.get_layer(layer_name).output for layer_name in layer_names])\n",
    "    intermediate_layer_outputs = intermediate_layer_model.predict(expanded_input_data)\n",
    "\n",
    "    for i, intermediate_layer_output in enumerate(intermediate_layer_outputs):\n",
    "        scaled = scale(intermediate_layer_output[0])       \n",
    "        for num_neuron in range(scaled.shape[-1]):\n",
    "            if np.mean(scaled[..., num_neuron]) > threshold and not model_layer_dict[(layer_names[i], num_neuron)]:\n",
    "                model_layer_dict[(layer_names[i], num_neuron)] = True\n",
    "    \n",
    "    #compute coverage\n",
    "    covered_neurons = len([v for v in model_layer_dict.values() if v])\n",
    "\n",
    "    total_neurons = len(model_layer_dict)\n",
    "\n",
    "    #return covered_neurons, total_neurons, covered_neurons / float(total_neurons)\n",
    "    return covered_neurons / float(total_neurons)\n",
    "                \n",
    "def scale(intermediate_layer_output, rmax=1, rmin=0):\n",
    "    X_std = (intermediate_layer_output - intermediate_layer_output.min()) / (\n",
    "        intermediate_layer_output.max() - intermediate_layer_output.min())\n",
    "    X_scaled = X_std * (rmax - rmin) + rmin\n",
    "    return X_scaled"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.non-dominant set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### dominance 的定义"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dominance(solution_object1, solution_object2):\n",
    "    #input : two solutions with object , both shape (3)\n",
    "    #return: true if solution1 dominates solution2 解1比解2牛逼\n",
    "    #       false if solution1 not dominates solution 2 解1不比解2牛逼，不暗示解2比解1牛逼\n",
    "    #minimize!!!!\n",
    "    notbad = False\n",
    "    if (solution_object1[0]<=solution_object2[0])&(solution_object1[1]<=solution_object2[1])&(solution_object1[2]<=solution_object2[2]):\n",
    "        notbad = True\n",
    "    better = False\n",
    "    if notbad:\n",
    "        if (solution_object1[0]<solution_object2[0])|(solution_object1[1]<solution_object2[1])|(solution_object1[2]<solution_object2[2]):\n",
    "            better = True\n",
    "    return better\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### non-dominant sorting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def non_dominant_sort(mapped_solutions):\n",
    "    #input: mapped_solutions (#solutions, 3)\n",
    "    #return: (index of solution, rank) of len(#mapped_solutions)\n",
    "    \n",
    "    length = mapped_solutions.shape[0]\n",
    "    n = np.zeros((length), dtype = np.int)  #比 i解牛逼的解数\n",
    "    s = []\n",
    "    P = []\n",
    "    rank = [] # the one I need to return\n",
    "    \n",
    "    for i in range(length):\n",
    "        s.append([])\n",
    "    #create the two entities\n",
    "    for i in range(length):\n",
    "        for j in range(length):\n",
    "            if i == j:\n",
    "                continue\n",
    "            else:\n",
    "                if dominance(mapped_solutions[j],mapped_solutions[i]):\n",
    "                    n[i] = n[i]+1\n",
    "                if dominance(mapped_solutions[i],mapped_solutions[j]):\n",
    "                    s[i].append(j)\n",
    "    #两件事，P, 创建返回的数据\n",
    "    for i in range(length):\n",
    "        if n[i] == 0:\n",
    "            P.append(i)\n",
    "                \n",
    "    for i in range(length):\n",
    "        if n[i] == 0:\n",
    "            rank.append((i,0))\n",
    "            n[i] = n[i]-1\n",
    "    #开始排序\n",
    "    iteration = 1\n",
    "    while len(P) != 0:\n",
    "        Q = []\n",
    "        for i in P:\n",
    "            for j in s[i]:\n",
    "                n[j] = n[j] -1\n",
    "                if n[j] == 0:\n",
    "                    if j not in Q:\n",
    "                        Q.append(j)\n",
    "        for i in Q:\n",
    "            rank.append((i,iteration))\n",
    "            n[i] = n[i]-1\n",
    "        P = Q\n",
    "        iteration = iteration+1\n",
    "    \n",
    "    return rank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6.corwding distance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def crowd_distance_sort(sub_mapped_solutions, sub_solutions, num_needed_solutions):\n",
    "    #input: sub_mapped_solutions (#sub_mapped_solutions, 3) list\n",
    "    #       sub_solutions (#subsolutions, 28,28,1) np array\n",
    "    #return: solutions with num_needed_solutions number\n",
    "    #默认sub_mapped_solutions和sub_solutions是一一对应的\n",
    "    \n",
    "    \n",
    "    crowd_distance_table = np.zeros((sub_solutions.shape[0], 3),dtype = float) #与输入意义对应\n",
    "    avaraged_crowd = np.zeros((sub_solutions.shape[0], 1),dtype = float)\n",
    "    selected_solutions = np.empty((num_needed_solutions,28,28,1)) #输出的解\n",
    "    \n",
    "    index = []\n",
    "    index_range = range(sub_solutions.shape[0])\n",
    "    for i in index_range:\n",
    "        index.append(i)\n",
    "    \n",
    "    for i in range(3):\n",
    "        obj_sorted_index = np.argsort(sub_mapped_solutions[...,i])\n",
    "        crowd_distance_table[obj_sorted_index[0]][i] = float('inf')\n",
    "        crowd_distance_table[obj_sorted_index[-1]][i] = float('inf')\n",
    "        max_obj = np.max(sub_mapped_solutions[...,i])\n",
    "        min_obj = np.min(sub_mapped_solutions[...,i])\n",
    "        scale = max_obj-min_obj\n",
    "        if scale == 0.0:\n",
    "            scale = 1.0\n",
    "        for j in index[1:-1]:\n",
    "            crowd_distance_table[(obj_sorted_index[j]),i] = (crowd_distance_table[(obj_sorted_index[j]),i])+( (sub_mapped_solutions[(obj_sorted_index[j+1]),i])-(sub_mapped_solutions[(obj_sorted_index[j-1]),i]))/(scale)\n",
    "            #print(crowd_distance_table[obj_sorted_index[j]][i])\n",
    "    \n",
    "    averaged_crowd = (crowd_distance_table[...,0]+crowd_distance_table[...,1]+crowd_distance_table[...,2])/3\n",
    "        \n",
    "    sorted_crowd_index = np.argsort(averaged_crowd)\n",
    "    list1 = []\n",
    "    for i in sorted_crowd_index[::-1]:\n",
    "        list1.append(i)\n",
    "    \n",
    "    for i in range(num_needed_solutions):\n",
    "        selected_solutions[i,...] = sub_solutions[list1[i],...]\n",
    "    return selected_solutions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\n",
      "[49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n"
     ]
    }
   ],
   "source": [
    "index = []\n",
    "index_range = range(50)\n",
    "for i in index_range:\n",
    "    index.append(i)\n",
    "print(index)\n",
    "index = sorted(index, key = lambda x : index[x], reverse = True)\n",
    "print(index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7. Generator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 全局变量 Global variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# some global variables\n",
    "threshold = 0 # threshold for neuron coverage\n",
    "num_parents = 100 # # of parent generation\n",
    "num_parent_mutations = 100 # max # of pixils mutations in the parent generation\n",
    "num_evolutions = 10 # number of the itertions of EA\n",
    "p_crossover = 0.7 #crossover 的概率\n",
    "p_mutation = 0.25 # 修改的概率\n",
    "p_deletion = 1-p_crossover-p_mutation #消除修改的概率\n",
    "num_mutation_pixil = 20 #一次突变的像素数\n",
    "num_deletion_pixil = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evolution(parent_solutions, original_img,label, iteration):\n",
    "    #input: parent solutions\n",
    "    #return : optimal solutions\n",
    "    \n",
    "    needed_solution_number = num_parents\n",
    "     \n",
    "    for generation in range(num_evolutions):\n",
    "        offspring_solutions = offspring_generator(parent_solutions, p_crossover, p_mutation, p_deletion, original_img,10,10)\n",
    "        combined_solutions =  np.concatenate((parent_solutions, offspring_solutions), axis=0, out=None)\n",
    "        mapped_solutions = ObjMapping(combined_solutions, model1, model2, model3, original_img, threshold)\n",
    "        \n",
    "        \n",
    "        index_for_parents = 0\n",
    "        \n",
    "        \n",
    "        rank = non_dominant_sort(mapped_solutions)\n",
    "        \n",
    "        \n",
    "        for i in range(rank[-1][1]+1):\n",
    "            candidates = [a[0] for a in rank if a[1] == i]\n",
    "            num_candidates = len(candidates)\n",
    "            #够\n",
    "            if needed_solution_number >= num_candidates:\n",
    "                for j in candidates:\n",
    "                    parent_solutions[index_for_parents,...] = combined_solutions[j]\n",
    "                    index_for_parents = index_for_parents +1\n",
    "                    needed_solution_number = needed_solution_number-1\n",
    "            else:\n",
    "                #sub_solutions\n",
    "                sub_solutions = np.empty((num_candidates,28,28,1))\n",
    "                index_for_subsolutions = 0\n",
    "                for q in candidates:\n",
    "                    sub_solutions[index_for_subsolutions,...] = combined_solutions[q]\n",
    "                    index_for_subsolutions = index_for_subsolutions+1\n",
    "                 \n",
    "                #sub_mapped_solutions\n",
    "                sub_mapped_solutions = np.empty((num_candidates,3))\n",
    "                index_sub_mapped = 0\n",
    "                for q in candidates:    \n",
    "                    sub_mapped_solutions[index_sub_mapped,...] = mapped_solutions[q]\n",
    "                    index_sub_mapped = index_sub_mapped+1\n",
    "                \n",
    "                selected_solutions = crowd_distance_sort(sub_mapped_solutions, sub_solutions, needed_solution_number)\n",
    "                for selected_solution in selected_solutions:\n",
    "                    parent_solutions[index_for_parents,...] = selected_solution\n",
    "                    index_for_parents = index_for_parents+1\n",
    "                break\n",
    "    \n",
    "    optiaml_solutions = parent_solutions\n",
    "    optimal_mapped = ObjMapping(optiaml_solutions, model1, model2, model3, original_img, threshold)\n",
    "    rank = non_dominant_sort(optimal_mapped)\n",
    "    \n",
    "    optimal_solutions_index = [a[0] for a in rank if a[1] == 0]\n",
    "    for i in optimal_solutions_index:\n",
    "        if optimal_mapped[i][2] == 0:\n",
    "            continue\n",
    "        else:\n",
    "            \n",
    "            img_to_save = np.empty((1,28,28,1))\n",
    "            img_to_save[0,...] = optiaml_solutions[i]\n",
    "            img_to_save = deprocess_image(img_to_save)\n",
    "            imsave('./results/7/'+str(iteration)+'_'+ str(i)+'_'+str(-optimal_mapped[i,0])+'_'+str(-optimal_mapped[i,1])+'_'+str(optimal_mapped[i,2])+'_'+str(label)+'.png',img_to_save)\n",
    "            print('已保存',iteration,i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5345\n",
      "4\n",
      "已保存 0 0\n",
      "已保存 0 1\n",
      "已保存 0 3\n",
      "已保存 0 22\n",
      "已保存 0 86\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:62: DeprecationWarning: `imsave` is deprecated!\n",
      "`imsave` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0.\n",
      "Use ``imageio.imwrite`` instead.\n"
     ]
    }
   ],
   "source": [
    "for i in range(1):\n",
    "    seed_index = random.randint(0,x_test.shape[0]-1)\n",
    "    print(seed_index)\n",
    "    original_img = x_test[seed_index]\n",
    "    original_label = y_test[seed_index]\n",
    "    #plt.imshow(original_img.reshape(28*28).reshape((28,28)), cmap = plt.cm.binary)\n",
    "    #plt.show()\n",
    "    print(original_label)\n",
    "    parent_solutions = parent_generator(original_img, num_parents, num_parent_mutations)\n",
    "    #print(parent_solutions.shape)\n",
    "    evolution(parent_solutions, original_img,original_label,i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: DeprecationWarning: `imsave` is deprecated!\n",
      "`imsave` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0.\n",
      "Use ``imageio.imwrite`` instead.\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "img_to_save = np.empty((1,28,28,1))\n",
    "img_to_save[0,...] = x_test[5345]\n",
    "img_to_save = deprocess_image(img_to_save)\n",
    "#imsave('./results/7/'+str(iteration)+'_'+ str(i)+'_'+str(-optimal_mapped[i,0])+'_'+str(-optimal_mapped[i,1])+'_'+str(optimal_mapped[i,2])+'_'+str(label)+'.png',img_to_save)\n",
    "imsave('seed.png',img_to_save)\n",
    "#print('已保存',iteration,i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "parent_solutions = parent_generator(original_img, num_parents, num_parent_mutations)\n",
    "print(parent_solutions.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "print(parent_solutions[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:58: DeprecationWarning: `imsave` is deprecated!\n",
      "`imsave` is deprecated in SciPy 1.0.0, and will be removed in 1.2.0.\n",
      "Use ``imageio.imwrite`` instead.\n"
     ]
    }
   ],
   "source": [
    "evolution(parent_solutions, original_img,original_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def deprocess_image(x):\n",
    "    x *= 255\n",
    "    x = np.clip(x, 0, 255).astype('uint8')\n",
    "    return x.reshape(x.shape[1], x.shape[2])  # original shape (1,img_rows, img_cols,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = []\n",
    "y = []\n",
    "z = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "image_dir1 = './results/0/'\n",
    "image_dir2 = './results/1/'\n",
    "image_dir3 = './results/4/'\n",
    "image_dir4 = './results/5/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_names1 = [f for f in listdir(image_dir1) if isfile(join(image_dir1, f)) and '.png' in f]\n",
    "file_names2 = [f for f in listdir(image_dir2) if isfile(join(image_dir2, f)) and '.png' in f]\n",
    "file_names3 = [f for f in listdir(image_dir3) if isfile(join(image_dir3, f)) and '.png' in f]\n",
    "file_names4 = [f for f in listdir(image_dir4) if isfile(join(image_dir4, f)) and '.png' in f]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6079\n",
      "6079\n",
      "6079\n"
     ]
    }
   ],
   "source": [
    "for file in file_names1:\n",
    "    x.append(float(file.split('_')[2]))\n",
    "    y.append(float(file.split('_')[3]))\n",
    "    z.append(float(file.split('_')[4]))\n",
    "for file in file_names2:\n",
    "    x.append(float(file.split('_')[2]))\n",
    "    y.append(float(file.split('_')[3]))\n",
    "    z.append(float(file.split('_')[4]))\n",
    "for file in file_names3:\n",
    "    x.append(float(file.split('_')[2]))\n",
    "    y.append(float(file.split('_')[3]))\n",
    "    z.append(float(file.split('_')[4]))\n",
    "for file in file_names4:\n",
    "    x.append(float(file.split('_')[2]))\n",
    "    y.append(float(file.split('_')[3]))\n",
    "    z.append(float(file.split('_')[4]))\n",
    "print(len(x))\n",
    "print(len(y))\n",
    "print(len(z))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Objective valeus of generated test inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.17307692307692307,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.21153846153846154,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.19230769230769232,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.25,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.25,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.19230769230769232,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.17307692307692307,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.038461538461538464,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.19230769230769232,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.21153846153846154,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.17307692307692307,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.19230769230769232,\n",
       " 0.038461538461538464,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.17307692307692307,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.038461538461538464,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.15384615384615385,\n",
       " 0.17307692307692307,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.23076923076923078,\n",
       " 0.038461538461538464,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.19230769230769232,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.038461538461538464,\n",
       " 0.21153846153846154,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.21153846153846154,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.038461538461538464,\n",
       " 0.19230769230769232,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.21153846153846154,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.038461538461538464,\n",
       " 0.15384615384615385,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.23076923076923078,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.11538461538461539,\n",
       " 0.09615384615384616,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.17307692307692307,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.038461538461538464,\n",
       " 0.038461538461538464,\n",
       " 0.11538461538461539,\n",
       " 0.15384615384615385,\n",
       " 0.09615384615384616,\n",
       " 0.07692307692307693,\n",
       " 0.21153846153846154,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.07692307692307693,\n",
       " 0.057692307692307696,\n",
       " 0.19230769230769232,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.038461538461538464,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.1346153846153846,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.17307692307692307,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.07692307692307693,\n",
       " 0.07692307692307693,\n",
       " 0.15384615384615385,\n",
       " 0.1346153846153846,\n",
       " 0.057692307692307696,\n",
       " 0.09615384615384616,\n",
       " 0.21153846153846154,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.1346153846153846,\n",
       " 0.09615384615384616,\n",
       " 0.057692307692307696,\n",
       " 0.19230769230769232,\n",
       " 0.09615384615384616,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.1346153846153846,\n",
       " 0.1346153846153846,\n",
       " 0.038461538461538464,\n",
       " 0.09615384615384616,\n",
       " 0.17307692307692307,\n",
       " 0.15384615384615385,\n",
       " 0.11538461538461539,\n",
       " 0.07692307692307693,\n",
       " 0.11538461538461539,\n",
       " 0.057692307692307696,\n",
       " 0.15384615384615385,\n",
       " ...]"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2.569497626334851,\n",
       " 0.03112072951320754,\n",
       " 1.132261653027154,\n",
       " 0.12145674051286916,\n",
       " 0.108120389467536,\n",
       " 0.00015484956469510207,\n",
       " 0.0006051485867397989,\n",
       " 0.02315406941471565,\n",
       " 0.25121925179320037,\n",
       " 0.0003336256243830042,\n",
       " 0.0006235220168421202,\n",
       " 0.04471726369737222,\n",
       " 0.033352469100292034,\n",
       " 0.14617435685589797,\n",
       " 0.12016264616594441,\n",
       " 0.00023542051948980368,\n",
       " 0.03977970351030535,\n",
       " 0.058298040335898804,\n",
       " 0.003892913335180464,\n",
       " 0.14500005645936653,\n",
       " 0.08770563510734064,\n",
       " 2.9544655871459327,\n",
       " 0.9506657058328187,\n",
       " 2.674368466886532,\n",
       " 3.111798231554523e-05,\n",
       " 0.00020266190516893268,\n",
       " 0.9306910801266843,\n",
       " 1.0852505669413404,\n",
       " 0.029131733298763507,\n",
       " 2.9975826278011937,\n",
       " 1.3342494605860895e-05,\n",
       " 4.7083868576158374e-05,\n",
       " 3.4910464382692226,\n",
       " 2.362619916460062,\n",
       " 0.004834225946978493,\n",
       " 0.05279940415634834,\n",
       " 2.799109613413748,\n",
       " 0.001187591403837807,\n",
       " 0.0035634307065596227,\n",
       " 0.004316158931121805,\n",
       " 0.31013861809091536,\n",
       " 0.016022517919221713,\n",
       " 0.04737511327255106,\n",
       " 0.7124283479392577,\n",
       " 2.5122513970873115,\n",
       " 0.007304239179759862,\n",
       " 0.0731439354815393,\n",
       " 0.05781140048889416,\n",
       " 0.09438681389525494,\n",
       " 0.0035744411689543343,\n",
       " 0.13640399145274174,\n",
       " 0.22678849825115321,\n",
       " 0.018756303416225723,\n",
       " 0.06910443788540693,\n",
       " 0.320324453537296,\n",
       " 2.0803450919360778,\n",
       " 0.02585340196208108,\n",
       " 0.020549476273080458,\n",
       " 0.002015927630644226,\n",
       " 0.3993306194406614,\n",
       " 0.014146598035854184,\n",
       " 0.11098219195151682,\n",
       " 1.3969936429298908,\n",
       " 0.03938934383047865,\n",
       " 0.05769156695339461,\n",
       " 0.07408820386191545,\n",
       " 0.8269461794549279,\n",
       " 0.21764118868941296,\n",
       " 2.1238673300161436e-05,\n",
       " 0.0009859783187536341,\n",
       " 0.0012831223280882153,\n",
       " 1.1983563680555562,\n",
       " 0.009145289840901683,\n",
       " 0.005163316415306901,\n",
       " 0.3011091386633531,\n",
       " 0.00041176235159408325,\n",
       " 0.17530696011101554,\n",
       " 0.05847137830841431,\n",
       " 0.0001343759318620935,\n",
       " 0.053914652260828255,\n",
       " 0.0005319086101170665,\n",
       " 0.5210359379428082,\n",
       " 0.5668550040463083,\n",
       " 2.6119691969477117,\n",
       " 0.00648197879001533,\n",
       " 0.005130814469334326,\n",
       " 0.059633855617843956,\n",
       " 1.4898841007386352,\n",
       " 0.01363035095917553,\n",
       " 0.0003581313086687749,\n",
       " 0.0008779384635678915,\n",
       " 0.001984291478656308,\n",
       " 0.000762921481186942,\n",
       " 0.10565765820342676,\n",
       " 0.0018167631448970326,\n",
       " 0.049797840907217505,\n",
       " 0.025183946930289282,\n",
       " 0.05792363959733393,\n",
       " 0.028366594043341964,\n",
       " 0.013047464757658833,\n",
       " 8.69321457059296e-05,\n",
       " 0.0646602326839063,\n",
       " 2.516046483428197e-05,\n",
       " 0.010876469388788534,\n",
       " 5.302027730039248e-05,\n",
       " 0.3184238085019011,\n",
       " 0.0965691545629852,\n",
       " 0.03501890432194276,\n",
       " 0.05722357236012332,\n",
       " 0.013844079701039291,\n",
       " 0.00012819154156025556,\n",
       " 0.0013396095365455496,\n",
       " 0.00039102755787793174,\n",
       " 3.2616085277086676e-05,\n",
       " 0.17008716085853443,\n",
       " 0.7077709579478823,\n",
       " 0.004261698975170702,\n",
       " 0.01135042983855783,\n",
       " 1.483860684006185,\n",
       " 0.0008907056251625762,\n",
       " 0.001410092458250049,\n",
       " 0.00015963623453981585,\n",
       " 0.07394951723591478,\n",
       " 0.14540997412623735,\n",
       " 0.09417100670373202,\n",
       " 0.00015715396353956887,\n",
       " 2.6069997039794544,\n",
       " 1.9380011809934525e-05,\n",
       " 0.23117734326000505,\n",
       " 0.0016373135861937303,\n",
       " 2.7990812542222574e-05,\n",
       " 1.1418375553589229e-05,\n",
       " 3.2915429050259235e-05,\n",
       " 0.002054358382984905,\n",
       " 2.683122924519324,\n",
       " 0.007105625985791116,\n",
       " 0.700922149374251,\n",
       " 1.0164493279514555,\n",
       " 0.1059419417078864,\n",
       " 0.0031852063960773423,\n",
       " 0.0647657390885712,\n",
       " 0.00024329192533389943,\n",
       " 1.5180516254281208e-06,\n",
       " 0.14138227279913806,\n",
       " 0.18830483384980734,\n",
       " 0.4392358755933401,\n",
       " 3.888258370024563,\n",
       " 0.00015633820713620945,\n",
       " 0.012272404507257306,\n",
       " 0.9847385213031066,\n",
       " 4.371518020917663e-05,\n",
       " 0.001662473414009432,\n",
       " 0.00019666409938930396,\n",
       " 0.10426874184317114,\n",
       " 0.01968143849831283,\n",
       " 0.003945487752032458,\n",
       " 0.01653696862068164,\n",
       " 0.06563248511602904,\n",
       " 0.08161791648719038,\n",
       " 0.002208610117534249,\n",
       " 0.007412312084710493,\n",
       " 0.1493395434045759,\n",
       " 0.009647093163449583,\n",
       " 0.05293887340833847,\n",
       " 0.05982613942999512,\n",
       " 0.0032141650311349607,\n",
       " 0.0013103014041855945,\n",
       " 0.8588327774768114,\n",
       " 0.010787687647872805,\n",
       " 0.6498746435304241,\n",
       " 0.5441727817578794,\n",
       " 0.012952083492518793,\n",
       " 0.0006010037584189623,\n",
       " 5.9453588661657486e-05,\n",
       " 1.2663771553689447,\n",
       " 0.0004021034147830352,\n",
       " 0.02039633361175172,\n",
       " 0.9368686436136642,\n",
       " 0.07532175575264155,\n",
       " 0.04492024201783824,\n",
       " 0.30952563367568975,\n",
       " 0.0011170002545788044,\n",
       " 2.155340757233489,\n",
       " 0.02292327108088054,\n",
       " 0.24757196072938426,\n",
       " 0.010867748727369078,\n",
       " 2.6190168100582127,\n",
       " 0.16754445436714605,\n",
       " 0.17575963370900788,\n",
       " 0.8171455719837297,\n",
       " 0.057854277684891625,\n",
       " 0.1726040977317247,\n",
       " 0.0031377123907425225,\n",
       " 0.7065588953159931,\n",
       " 0.06664990476448995,\n",
       " 0.009335438959218643,\n",
       " 0.19632012905197627,\n",
       " 0.0010409676199689224,\n",
       " 0.00218313982614049,\n",
       " 0.01712248775279078,\n",
       " 0.00023417781393028167,\n",
       " 8.989273229346942e-06,\n",
       " 0.004107062268974504,\n",
       " 4.319863968328846e-05,\n",
       " 0.011366285449716074,\n",
       " 0.22440650174837629,\n",
       " 0.45393294449156585,\n",
       " 0.02745108340440182,\n",
       " 0.11913295889871733,\n",
       " 0.20700148470632485,\n",
       " 0.002046250435776137,\n",
       " 0.0491299442008426,\n",
       " 0.07929256987942956,\n",
       " 0.5996832320956855,\n",
       " 0.0007113375924350986,\n",
       " 0.0005649828972160314,\n",
       " 2.828864310112987e-05,\n",
       " 0.005176119156317327,\n",
       " 3.190636972693028,\n",
       " 5.237637398079428e-05,\n",
       " 2.8235446749622497,\n",
       " 0.0012434059910507297,\n",
       " 0.8813520268949597,\n",
       " 0.2751127617031323,\n",
       " 0.019897076908516942,\n",
       " 0.3526114161334135,\n",
       " 0.02774768649552739,\n",
       " 0.10111790794923015,\n",
       " 0.027225745824082992,\n",
       " 0.4138443008650769,\n",
       " 0.02307151352507622,\n",
       " 4.0982230212684156e-05,\n",
       " 0.10757276137560723,\n",
       " 0.1628761727084934,\n",
       " 0.08327717144766211,\n",
       " 0.008333150741296091,\n",
       " 0.08976657650236769,\n",
       " 0.001795929656115124,\n",
       " 4.010824810927956e-06,\n",
       " 0.0006210119488564513,\n",
       " 0.3365444428946821,\n",
       " 0.000742634496970318,\n",
       " 0.00020421500458869596,\n",
       " 0.31707495790048634,\n",
       " 0.0834896277519262,\n",
       " 0.009739630920194031,\n",
       " 3.87523112451831,\n",
       " 0.0487428294022094,\n",
       " 0.005492026311107666,\n",
       " 0.0020773229378754365,\n",
       " 0.008009511114878801,\n",
       " 0.011570984067631684,\n",
       " 0.05877460459171785,\n",
       " 2.5033441787676716,\n",
       " 1.6242046298693487,\n",
       " 0.0013038684784074661,\n",
       " 0.0004464371861084692,\n",
       " 0.005513781899267976,\n",
       " 0.0011082648177183074,\n",
       " 0.08372818160194129,\n",
       " 0.002019050903432531,\n",
       " 0.0061103533927250025,\n",
       " 0.009077207971728285,\n",
       " 0.06450341167701257,\n",
       " 0.0028981900245399483,\n",
       " 1.0959130195648155e-05,\n",
       " 0.25097189184350555,\n",
       " 0.08520784502436918,\n",
       " 0.017524911747528904,\n",
       " 0.33391379992281145,\n",
       " 0.010185255596364184,\n",
       " 1.2433183546484037,\n",
       " 0.24599416147225384,\n",
       " 3.6228154038593864e-05,\n",
       " 0.04933768000228156,\n",
       " 7.57533716511799e-05,\n",
       " 0.013184924397844355,\n",
       " 4.349121964546121e-05,\n",
       " 0.0011047925157411033,\n",
       " 0.0034530334743880925,\n",
       " 0.0014914845707851307,\n",
       " 0.4316635105797349,\n",
       " 0.5775245185123161,\n",
       " 0.00017092159332494114,\n",
       " 0.7507413142206933,\n",
       " 0.4072924071147894,\n",
       " 0.05939360770901203,\n",
       " 0.00042335417140427437,\n",
       " 0.0012039299107945507,\n",
       " 0.2037037806291818,\n",
       " 0.8279239804246705,\n",
       " 0.000617573465778032,\n",
       " 0.1629145113392496,\n",
       " 4.835514410028545e-05,\n",
       " 0.004325551301527378,\n",
       " 0.06222203632290757,\n",
       " 0.005493411108587393,\n",
       " 3.5691491067100856,\n",
       " 0.33325844801750576,\n",
       " 0.0011094882475390386,\n",
       " 0.001959293794232795,\n",
       " 0.06814543937923877,\n",
       " 0.013912419449433494,\n",
       " 0.00048396989008441405,\n",
       " 8.722817490294553e-06,\n",
       " 2.6805958929620033,\n",
       " 0.03802286379604212,\n",
       " 0.0025187972302947448,\n",
       " 0.00036648343348406816,\n",
       " 0.05923560628309055,\n",
       " 0.0016308649653637985,\n",
       " 0.00022340273607846775,\n",
       " 0.003146828905459674,\n",
       " 0.00251931365694702,\n",
       " 0.00036030733168130637,\n",
       " 0.5863935064126893,\n",
       " 0.23424011175971327,\n",
       " 0.00019569236361921365,\n",
       " 0.06791985325162486,\n",
       " 0.004796907748009005,\n",
       " 0.004019183253520617,\n",
       " 2.472698664847485,\n",
       " 0.005673800236721593,\n",
       " 4.3986945533359923e-05,\n",
       " 1.152675808386448,\n",
       " 3.005060094273176,\n",
       " 0.008639256283248131,\n",
       " 0.03341286512184771,\n",
       " 8.346040280238052e-06,\n",
       " 1.8324964825919778,\n",
       " 2.5613776638002252,\n",
       " 0.297290155931762,\n",
       " 0.0948011217996303,\n",
       " 1.4860463135712223,\n",
       " 0.048063660461919455,\n",
       " 2.0396481294701516,\n",
       " 2.4637795378212104,\n",
       " 0.004246695841462866,\n",
       " 0.0024456671155882095,\n",
       " 0.0007867102663438358,\n",
       " 2.6765398587035114e-05,\n",
       " 3.7782085261760585,\n",
       " 0.6045172701237576,\n",
       " 9.578826024006677e-05,\n",
       " 0.11860634136382942,\n",
       " 0.0010188995174124096,\n",
       " 0.001329764335267288,\n",
       " 0.00013096825737937793,\n",
       " 0.06471365861559836,\n",
       " 0.005731228739488179,\n",
       " 0.020538649360617,\n",
       " 0.008527639179362723,\n",
       " 0.01538233731493166,\n",
       " 0.0012177501179849214,\n",
       " 0.0026937553741736243,\n",
       " 0.005126745368568394,\n",
       " 0.004176496497736437,\n",
       " 0.10439221672792896,\n",
       " 0.0009983304467637844,\n",
       " 0.011424737606787442,\n",
       " 2.0379253203044736,\n",
       " 0.10005241779941536,\n",
       " 0.6472641296626389,\n",
       " 0.09546655835904616,\n",
       " 2.5525429288502863,\n",
       " 0.28599745493772843,\n",
       " 0.7686669061449684,\n",
       " 0.7602967258962963,\n",
       " 0.0011045411745309248,\n",
       " 0.07106285701483994,\n",
       " 0.0008279712382629617,\n",
       " 4.182934992313221,\n",
       " 0.001336455778642276,\n",
       " 0.00014523640047540542,\n",
       " 0.0005943941580423343,\n",
       " 0.5041292750368691,\n",
       " 0.020451392941737367,\n",
       " 3.323271920676611,\n",
       " 0.7851814433965671,\n",
       " 0.6115679427254875,\n",
       " 0.015095362509621783,\n",
       " 0.0004562337371778469,\n",
       " 0.18745605678591382,\n",
       " 1.7246528406784756,\n",
       " 0.537116929597687,\n",
       " 0.14204277556018954,\n",
       " 0.04334532344677797,\n",
       " 2.7732512690848714,\n",
       " 1.5404040429738461,\n",
       " 0.012355423237525143,\n",
       " 0.0025849351939072895,\n",
       " 0.07648153137586533,\n",
       " 0.0009488645700024279,\n",
       " 0.0008595207384342517,\n",
       " 1.179416706479799,\n",
       " 0.7254773304646879,\n",
       " 0.3423020641253274,\n",
       " 0.1757078518150102,\n",
       " 0.013521799539332746,\n",
       " 0.001437052068408072,\n",
       " 0.5556883240030075,\n",
       " 0.13476695771741465,\n",
       " 0.00249174215402731,\n",
       " 0.00024758647147326223,\n",
       " 0.024988611691556528,\n",
       " 0.00012188019192878666,\n",
       " 0.0026476407735329405,\n",
       " 0.052442264031828945,\n",
       " 0.0009917137623478567,\n",
       " 0.0037540673875856093,\n",
       " 0.009973936449711118,\n",
       " 0.005206162551307452,\n",
       " 0.0035733288635494617,\n",
       " 0.010378289423558618,\n",
       " 0.0069085572470706175,\n",
       " 0.0007073135292134936,\n",
       " 5.236493822871309e-05,\n",
       " 0.37763992889517795,\n",
       " 0.008527040972844478,\n",
       " 0.0015241903127270352,\n",
       " 0.018254231599295973,\n",
       " 0.004441487260024246,\n",
       " 0.00037621799347586915,\n",
       " 0.00024342817363637304,\n",
       " 0.006971501928020374,\n",
       " 0.0610328524398732,\n",
       " 0.05689487501219759,\n",
       " 1.3766336165807962,\n",
       " 0.4395111365483899,\n",
       " 0.0065384040732134885,\n",
       " 0.09242189582710125,\n",
       " 0.0006562854761068629,\n",
       " 0.01063805316370292,\n",
       " 0.005233666088002603,\n",
       " 0.0011171298473547514,\n",
       " 0.028806562976797068,\n",
       " 0.00013825968398162173,\n",
       " 0.00011950996728303563,\n",
       " 0.04736205267611708,\n",
       " 0.006807790899808236,\n",
       " 1.8289788354029306,\n",
       " 1.7607087574766638,\n",
       " 0.0025452204486143258,\n",
       " 0.01634384650893283,\n",
       " 0.04949498636307226,\n",
       " 0.0021659355279417813,\n",
       " 0.17442241031988814,\n",
       " 0.009918832798000148,\n",
       " 2.327240229147719,\n",
       " 0.18317378678310642,\n",
       " 0.07219479567956055,\n",
       " 0.0034905156049376274,\n",
       " 0.002037970152728441,\n",
       " 0.0012085644428075676,\n",
       " 3.8665440768096064,\n",
       " 0.036414602799387984,\n",
       " 0.5133166822858966,\n",
       " 0.0027079947534253135,\n",
       " 0.001310337833961405,\n",
       " 1.2070526755994884,\n",
       " 0.0002528661797675772,\n",
       " 2.8528004993128973e-05,\n",
       " 1.0284291812814337,\n",
       " 0.055450424210107485,\n",
       " 8.15048517816105e-06,\n",
       " 0.5996962323137297,\n",
       " 0.07663746025247065,\n",
       " 0.0010145924402408094,\n",
       " 0.0023329316938462963,\n",
       " 0.018009540192163165,\n",
       " 0.32467090811314847,\n",
       " 0.000872802935927588,\n",
       " 0.00035526537280842346,\n",
       " 0.6082304183417317,\n",
       " 0.22910841101536306,\n",
       " 0.003580585869166826,\n",
       " 2.5582402269264462e-05,\n",
       " 0.08759108477439342,\n",
       " 1.7637366652412947,\n",
       " 0.055596857725930704,\n",
       " 0.27137391129606936,\n",
       " 9.825127585591509e-05,\n",
       " 0.004811858842312944,\n",
       " 0.004829271899904369,\n",
       " 0.00021498512156642652,\n",
       " 0.10073886614088678,\n",
       " 0.0001687035361511063,\n",
       " 0.00237609655125183,\n",
       " 0.0038760909188857995,\n",
       " 0.00018550461771052115,\n",
       " 0.04944529832946554,\n",
       " 0.0029225119021563384,\n",
       " 0.0034595847084896696,\n",
       " 0.0004399269607382303,\n",
       " 4.1650737825108664e-05,\n",
       " 0.012300722243226711,\n",
       " 0.0019173572472824516,\n",
       " 1.0062977513671285,\n",
       " 0.007047953189049938,\n",
       " 0.005083742477398601,\n",
       " 0.01064406956655488,\n",
       " 0.023345100065492966,\n",
       " 0.002239386021310779,\n",
       " 0.2500018339565031,\n",
       " 0.251660174047327,\n",
       " 0.003880731815899342,\n",
       " 0.0006555789900614635,\n",
       " 1.5623095651408936e-05,\n",
       " 0.001394363162852587,\n",
       " 0.00011988427485281738,\n",
       " 0.04479058998132501,\n",
       " 0.004347656817940748,\n",
       " 1.1709164331033648,\n",
       " 0.027610164951786947,\n",
       " 0.06224067952944179,\n",
       " 0.26678023110998195,\n",
       " 0.7576777620133708,\n",
       " 3.6411030150993045e-05,\n",
       " 0.004084080064316934,\n",
       " 0.03965207147324179,\n",
       " 2.0959625059249887,\n",
       " 0.3738018944861806,\n",
       " 0.016660428257590128,\n",
       " 0.0774311847828173,\n",
       " 0.01425369503944328,\n",
       " 0.7922595876341375,\n",
       " 0.019005537963678345,\n",
       " 0.21171101257443325,\n",
       " 0.0003426194437645293,\n",
       " 0.2039331372976072,\n",
       " 0.017015399700738953,\n",
       " 0.010186327784115379,\n",
       " 2.6589205888604965,\n",
       " 0.06861877922098963,\n",
       " 0.09689821028210055,\n",
       " 0.17062505552576113,\n",
       " 0.00028000261187866027,\n",
       " 0.261086322862635,\n",
       " 2.440167832899988,\n",
       " 0.008174263145315663,\n",
       " 0.017997220918532217,\n",
       " 0.0006848602543408749,\n",
       " 0.00472047444452528,\n",
       " 0.004806050664919353,\n",
       " 0.010772554653640923,\n",
       " 0.05749967284593538,\n",
       " 1.1987010423988882,\n",
       " 0.016166696554269687,\n",
       " 0.44386563926195155,\n",
       " 0.08082930405186062,\n",
       " 8.442229025421716e-05,\n",
       " 0.5976972627872978,\n",
       " 0.0519338391440613,\n",
       " 0.03215099573752855,\n",
       " 0.1324299035836134,\n",
       " 0.0027375692491258537,\n",
       " 0.0003669194058913434,\n",
       " 0.10111495105482504,\n",
       " 0.010483911003481339,\n",
       " 0.13605762303147284,\n",
       " 0.2506189665346028,\n",
       " 0.00037336610931142447,\n",
       " 1.0608268631476676,\n",
       " 4.1142707588500596,\n",
       " 2.3887888548123964e-05,\n",
       " 2.392698316906035,\n",
       " 0.008679286134110953,\n",
       " 0.006776430905219073,\n",
       " 0.0001290958730818249,\n",
       " 0.00025219959383424506,\n",
       " 0.006728492144375764,\n",
       " 1.8734081143326868,\n",
       " 0.00727328439229028,\n",
       " 0.01010535658424061,\n",
       " 0.0005212332786500894,\n",
       " 0.29615004434006753,\n",
       " 0.013136186462536713,\n",
       " 3.3715439177268536,\n",
       " 1.5796902584133932,\n",
       " 0.02682856804201763,\n",
       " 0.0016435474386147786,\n",
       " 0.0012100489764349691,\n",
       " 0.05837032778870821,\n",
       " 1.95007941300937e-05,\n",
       " 3.7563477565309604,\n",
       " 0.020429473860304352,\n",
       " 0.003980057199926572,\n",
       " 0.04024795768305456,\n",
       " 0.003181301787678059,\n",
       " 0.08815540894786711,\n",
       " 0.00014635821802850418,\n",
       " 0.6870730422251654,\n",
       " 0.03889936726234847,\n",
       " 0.025317862285450174,\n",
       " 0.23338619454989384,\n",
       " 0.0003438527244155336,\n",
       " 0.03488266909057103,\n",
       " 0.4147987320168407,\n",
       " 0.0003776530017793901,\n",
       " 3.367966289737325,\n",
       " 0.07393437650842012,\n",
       " 0.0009060781135601633,\n",
       " 0.003749584011767837,\n",
       " 0.012112389784656726,\n",
       " 0.03872685672355042,\n",
       " 1.9009429488002245e-05,\n",
       " 0.5441004170208115,\n",
       " 0.2395000896867714,\n",
       " 0.7206782375006728,\n",
       " 2.0675755692932616e-05,\n",
       " 0.08298195702687927,\n",
       " 0.0031384332723587596,\n",
       " 0.3709080658491075,\n",
       " 0.9316319796135991,\n",
       " 0.04198764524847187,\n",
       " 2.3899578419649226,\n",
       " 0.41833635599436225,\n",
       " 0.019055114341227863,\n",
       " 0.04949305922523095,\n",
       " 0.04145119347816717,\n",
       " 0.0001086716297991207,\n",
       " 0.08252944023822284,\n",
       " 6.138435153299045e-05,\n",
       " 0.002052441829310969,\n",
       " 0.001590281287900235,\n",
       " 0.03237989602778348,\n",
       " 0.11641380642299559,\n",
       " 1.020903993120393,\n",
       " 0.02574355297302324,\n",
       " 0.33014366984801047,\n",
       " 0.11459067162542041,\n",
       " 2.6453272709586853,\n",
       " 0.0026163031705742326,\n",
       " 0.07885017264504768,\n",
       " 0.0002606587376667302,\n",
       " 0.1570716813486623,\n",
       " 0.10551730110188373,\n",
       " 0.0001772843744058233,\n",
       " 2.3744376163511447,\n",
       " 0.005592016323224383,\n",
       " 5.8462747137520157e-05,\n",
       " 0.23465308250706585,\n",
       " 0.00010095471095206143,\n",
       " 0.026037901114206896,\n",
       " 0.0002795797240253433,\n",
       " 0.005965727895082595,\n",
       " 0.41922224774342,\n",
       " 0.01652458708074875,\n",
       " 8.615381131358042e-06,\n",
       " 0.03285352087886943,\n",
       " 0.13636714161160274,\n",
       " 0.000306873915272983,\n",
       " 1.4541676734159246,\n",
       " 0.0050973706942532004,\n",
       " 0.1920183867630909,\n",
       " 0.2676511164113383,\n",
       " 0.3430428427445804,\n",
       " 0.32666330299594737,\n",
       " 0.11070309042472923,\n",
       " 6.045754857851053e-05,\n",
       " 0.182401257820759,\n",
       " 0.021653728052954666,\n",
       " 0.31054439997134486,\n",
       " 0.10882993228159576,\n",
       " 0.4044536648546,\n",
       " 0.14221764298078915,\n",
       " 0.0010024711446224308,\n",
       " 0.19649264352145474,\n",
       " 0.08501732730894673,\n",
       " 0.0004001777363100659,\n",
       " 0.0020331129509423285,\n",
       " 5.2654037823634186e-05,\n",
       " 0.000239498621486513,\n",
       " 0.8889777933792441,\n",
       " 0.7672608123559482,\n",
       " 0.03226701881415295,\n",
       " 0.030040156958279773,\n",
       " 0.3710505159448019,\n",
       " 0.0807817978469883,\n",
       " 0.11874145231405464,\n",
       " 1.175634452712776,\n",
       " 0.8577436419330686,\n",
       " 0.11061048548617691,\n",
       " 0.13590232810281577,\n",
       " 0.0010077717502776085,\n",
       " 0.23881591644408218,\n",
       " 0.19325150967961235,\n",
       " 0.34275871763793475,\n",
       " 0.00022553680570717047,\n",
       " 0.44772803800017513,\n",
       " 3.5086780635175095e-05,\n",
       " 0.014699621466824908,\n",
       " 0.11199727849012064,\n",
       " 0.002713275625467304,\n",
       " 0.0017361916415239318,\n",
       " 2.8417359810186402e-05,\n",
       " 0.0002160013406139723,\n",
       " 0.03704729100053683,\n",
       " 3.897543013534461,\n",
       " 3.918337011401044e-05,\n",
       " 0.08095889125639372,\n",
       " 0.0031739784814289814,\n",
       " 0.0014473228737950095,\n",
       " 0.0018315163030830917,\n",
       " 0.091516221221904,\n",
       " 0.035783760413324095,\n",
       " 0.0011086532819119825,\n",
       " 0.06797189283918215,\n",
       " 2.702052684957234,\n",
       " 1.0534046130524075,\n",
       " 0.06569433052936802,\n",
       " 0.03002887955274347,\n",
       " 3.601672658409827e-05,\n",
       " 0.19374611035444322,\n",
       " 0.15305737912438677,\n",
       " 0.0016323724161669204,\n",
       " 0.007482059119674034,\n",
       " 0.0029753251818429582,\n",
       " 3.320814244922758,\n",
       " 0.028249472897173587,\n",
       " 0.004303985172988187,\n",
       " 0.04654318952561831,\n",
       " 0.00155443626437304,\n",
       " 0.010010266748645205,\n",
       " 0.6085996601707953,\n",
       " 0.0005329528775508408,\n",
       " 0.000513512787985615,\n",
       " 1.5192241112119391,\n",
       " 0.014155593983693005,\n",
       " 0.24221081840239736,\n",
       " 0.010256090280659463,\n",
       " 0.0014328893340471473,\n",
       " 0.015205386143910982,\n",
       " 0.0028995804724194496,\n",
       " 1.7150086552262702,\n",
       " 0.0001551818880751732,\n",
       " 0.3135985942575969,\n",
       " 1.083875859620921,\n",
       " 0.22180025303168804,\n",
       " 0.03534601640781432,\n",
       " 0.01537140602435745,\n",
       " 0.21393579370877092,\n",
       " 0.0011254305331220476,\n",
       " 0.017504509543611713,\n",
       " 0.0017589564779070398,\n",
       " 0.0016109770259655207,\n",
       " 0.0011470720797091822,\n",
       " 0.012295579932542933,\n",
       " 0.23407130524292663,\n",
       " 0.01718496523705909,\n",
       " 1.5241601612368072,\n",
       " 0.00205617641183109,\n",
       " 0.00031715578977795393,\n",
       " 0.032413584337897206,\n",
       " 0.0066387347788303686,\n",
       " 0.0057102755713544255,\n",
       " 0.00012408457233987975,\n",
       " 0.0006694174763607341,\n",
       " 0.17293529674469,\n",
       " 1.8433600321443206,\n",
       " 0.24313341116922887,\n",
       " 0.008145536117908136,\n",
       " 0.09173327369467899,\n",
       " 0.0001708230030107536,\n",
       " 0.0017646493465689438,\n",
       " 0.0005460679628125712,\n",
       " 0.8534808380943478,\n",
       " 0.15484556604051347,\n",
       " 0.0433684233952643,\n",
       " 0.00039364893291393346,\n",
       " 0.008379339372634149,\n",
       " 0.22653601950775304,\n",
       " 0.006859861273853813,\n",
       " 0.03745485879135302,\n",
       " 0.013129826911199127,\n",
       " 0.23266806239189464,\n",
       " 2.512855286515446,\n",
       " 5.7635064733190325e-06,\n",
       " 2.366172265387945,\n",
       " 5.3093772823500766e-05,\n",
       " 0.0004058612347939139,\n",
       " 0.004827748756375155,\n",
       " 0.015183401869894197,\n",
       " 0.1053219888501502,\n",
       " 0.0005938541904052304,\n",
       " 0.05368992473728429,\n",
       " 0.0008840558910585867,\n",
       " 0.013184458756979659,\n",
       " 0.011733314441826792,\n",
       " 1.973157483723753,\n",
       " 0.008190537801425535,\n",
       " 1.390956203853725,\n",
       " 3.81778305888559,\n",
       " 0.7900144900351052,\n",
       " 0.3141202316651288,\n",
       " 9.786770009931143e-06,\n",
       " 0.0011170002545788044,\n",
       " 0.003138234837251036,\n",
       " 0.0001776513156971643,\n",
       " 0.7491018610266433,\n",
       " 0.0006138604897010233,\n",
       " 1.2656103574846327,\n",
       " 0.03672719152358623,\n",
       " 0.02651817647711141,\n",
       " 0.00031897538385206037,\n",
       " 0.22670812484669156,\n",
       " 0.0016031487898855792,\n",
       " 0.0017536284458216367,\n",
       " 0.07415307592865616,\n",
       " 0.008916498722786825,\n",
       " 0.04402345387346199,\n",
       " 0.036033371903958486,\n",
       " 1.9249268051037528e-05,\n",
       " 0.06827964605547712,\n",
       " 2.7651709675125176,\n",
       " 0.018985957070163484,\n",
       " 0.2699131278293796,\n",
       " 0.32905144487085636,\n",
       " 0.0002566437517911346,\n",
       " 0.6246058037502435,\n",
       " 3.9039651828217092,\n",
       " 0.012595676280349808,\n",
       " 0.0008842461363922638,\n",
       " 0.12626196540287538,\n",
       " 0.00044725001447992865,\n",
       " 0.01285750323078233,\n",
       " 3.002081718228182e-05,\n",
       " 3.320005448241318,\n",
       " 0.002928178181500239,\n",
       " 2.393326039467297,\n",
       " 0.014034059975102764,\n",
       " 0.41939263725680576,\n",
       " 0.002684732562209682,\n",
       " 0.0002971637294692266,\n",
       " 0.24173442357997033,\n",
       " 0.1986847583085467,\n",
       " 0.34912697922907165,\n",
       " 0.39221621156400177,\n",
       " 0.0002850148927026336,\n",
       " 0.6057355843959158,\n",
       " 0.061457247248853264,\n",
       " 0.0013481537134067212,\n",
       " 3.208047382695213,\n",
       " 0.08255878062128,\n",
       " 0.01270562446180954,\n",
       " 0.001665947619367003,\n",
       " 0.004206976592001865,\n",
       " 0.006885479174842692,\n",
       " 0.14093560731882887,\n",
       " 0.0006990336105869577,\n",
       " 2.3261152353930774e-05,\n",
       " 0.0014770651441589067,\n",
       " 0.0011243547172736532,\n",
       " 1.9502972199298252,\n",
       " 0.006974730757157488,\n",
       " 0.00014500769533087876,\n",
       " 2.42273975631439,\n",
       " 0.0007514566136159039,\n",
       " 0.0003912233484989638,\n",
       " 0.03148624398980249,\n",
       " 0.0005271415169336678,\n",
       " 0.0009488645700024279,\n",
       " 0.0013672970758329926,\n",
       " 0.00018883023371624955,\n",
       " 0.0009186829857536803,\n",
       " 0.004233659569721826,\n",
       " 0.005865877661904051,\n",
       " 0.202372430097704,\n",
       " 2.790288433431442,\n",
       " 0.4915014086990368,\n",
       " 1.0871538525461801,\n",
       " 4.021598500221213,\n",
       " 0.3161810478988345,\n",
       " 0.011071287765072046,\n",
       " 0.13897459845978094,\n",
       " 0.20639264425656556,\n",
       " 0.00040365362515924476,\n",
       " 0.002039020239428698,\n",
       " 0.14426826426256412,\n",
       " 0.0020251009523815644,\n",
       " 7.569032369748874e-05,\n",
       " 0.007444514293689419,\n",
       " 0.038916792182476456,\n",
       " 3.833136580968561e-05,\n",
       " 0.009893443932355694,\n",
       " 0.011624519080671726,\n",
       " 2.4030823217257895,\n",
       " 0.10096527692778068,\n",
       " 0.22162739937696924,\n",
       " 0.005328440181269402,\n",
       " 0.22382505103044475,\n",
       " 0.6129872170198496,\n",
       " 1.0403633061171673,\n",
       " 0.008513383697760446,\n",
       " 0.008175656547223298,\n",
       " 0.024410940157089653,\n",
       " 4.622689773022612e-05,\n",
       " 0.01718496523705909,\n",
       " 0.7930137035446734,\n",
       " 0.04535818840304273,\n",
       " 0.13186973748085506,\n",
       " 0.0002443975932064531,\n",
       " 0.029404073806087894,\n",
       " 0.02956090106326531,\n",
       " 0.0006784150924325086,\n",
       " 0.02762074087150998,\n",
       " 0.19594339047307585,\n",
       " 0.013374800910404543,\n",
       " 0.0027541578319212334,\n",
       " 0.8878368853038567,\n",
       " 0.046922895787020025,\n",
       " 2.553460717539565,\n",
       " 0.001470897073791111,\n",
       " 0.013460700651538328,\n",
       " 4.151803436604185e-05,\n",
       " 1.2062670232055528,\n",
       " 1.0308958098685252,\n",
       " 0.007812783928301315,\n",
       " 0.0024469251326593167,\n",
       " 1.9641362367571629,\n",
       " 0.00045593432025804737,\n",
       " 0.3093655402301763,\n",
       " 0.0012485166666568182,\n",
       " 0.006494109674912011,\n",
       " 0.36460976460383865,\n",
       " 1.036658527165173,\n",
       " 0.00017402219913555778,\n",
       " 0.009466193200366901,\n",
       " 0.0007534799025327153,\n",
       " 0.013631441939778055,\n",
       " 0.00033108160102656364,\n",
       " 0.007237793020277036,\n",
       " 0.24493333469717982,\n",
       " 0.4908204876574981,\n",
       " 0.002922064626819353,\n",
       " 0.0008464799063380681,\n",
       " 0.005248391163247934,\n",
       " 0.007089413477956441,\n",
       " 0.006822959884299706,\n",
       " 0.12890429411752713,\n",
       " 0.3908731350632008,\n",
       " 0.003944286400777689,\n",
       " 0.03279282601060096,\n",
       " 2.466583910638292,\n",
       " 0.00022372094117139142,\n",
       " 0.00010533655664880879,\n",
       " 0.023034168673699895,\n",
       " 0.20926271281176165,\n",
       " 0.9095138903899169,\n",
       " 0.0007670857626903421,\n",
       " 2.6264298134374258,\n",
       " 0.33463925678826145,\n",
       " 0.28374134424495634,\n",
       " 0.0006353399823929304,\n",
       " 0.24886982085808995,\n",
       " 0.15277466649718008,\n",
       " 0.004182656712495486,\n",
       " 4.984104513182895e-05,\n",
       " 1.7112599344242483,\n",
       " 0.003283559124543183,\n",
       " 0.0007279890953569845,\n",
       " 0.11155047342465424,\n",
       " 0.015728560806549115,\n",
       " 1.3794146828242715,\n",
       " 1.5625230058155068,\n",
       " 0.04877459916822602,\n",
       " 0.0015420179822130953,\n",
       " 0.29330886267416795,\n",
       " 0.07705456894579853,\n",
       " 1.1859602548195012,\n",
       " 0.05261388405338349,\n",
       " 0.0014048952898356262,\n",
       " 0.05636170583503064,\n",
       " 1.5764904516318088,\n",
       " 0.519506597735409,\n",
       " 0.0013954073578017912,\n",
       " 8.331041576900992e-05,\n",
       " 1.994122838212081,\n",
       " 0.572979347645969,\n",
       " 0.12708499258483585,\n",
       " 0.08847862779221316,\n",
       " 0.32113476292221144,\n",
       " 0.04569411764276765,\n",
       " 0.07485907784018853,\n",
       " 0.061954562807159164,\n",
       " 1.9614659080580168,\n",
       " 0.051565020953532326,\n",
       " 0.00041683834685870267,\n",
       " 0.2048317358028271,\n",
       " 3.871680522087445,\n",
       " 0.0010409676199689224,\n",
       " 0.0035409736102991474,\n",
       " 0.5254041695039458,\n",
       " 3.1031315407889184,\n",
       " 1.6550713474935037,\n",
       " 0.04513683255220942,\n",
       " 0.532269932382178,\n",
       " 0.048724623550273016,\n",
       " 0.007562883068367832,\n",
       " 1.6784043957450194,\n",
       " ...]"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[20.0,\n",
       " 14.0,\n",
       " 20.0,\n",
       " 12.0,\n",
       " 20.0,\n",
       " 11.0,\n",
       " 10.0,\n",
       " 4.0,\n",
       " 26.0,\n",
       " 18.0,\n",
       " 7.0,\n",
       " 9.0,\n",
       " 7.0,\n",
       " 3.0,\n",
       " 12.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 4.0,\n",
       " 22.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 58.0,\n",
       " 27.0,\n",
       " 30.0,\n",
       " 9.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 58.0,\n",
       " 15.0,\n",
       " 30.0,\n",
       " 3.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 17.0,\n",
       " 3.0,\n",
       " 10.0,\n",
       " 30.0,\n",
       " 9.0,\n",
       " 30.0,\n",
       " 5.0,\n",
       " 15.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 5.0,\n",
       " 17.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 19.0,\n",
       " 17.0,\n",
       " 8.0,\n",
       " 19.0,\n",
       " 30.0,\n",
       " 3.0,\n",
       " 6.0,\n",
       " 30.0,\n",
       " 20.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 28.0,\n",
       " 16.0,\n",
       " 20.0,\n",
       " 17.0,\n",
       " 17.0,\n",
       " 8.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 3.0,\n",
       " 20.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 16.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 31.0,\n",
       " 2.0,\n",
       " 16.0,\n",
       " 19.0,\n",
       " 13.0,\n",
       " 29.0,\n",
       " 39.0,\n",
       " 24.0,\n",
       " 19.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 21.0,\n",
       " 30.0,\n",
       " 5.0,\n",
       " 7.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 2.0,\n",
       " 10.0,\n",
       " 2.0,\n",
       " 14.0,\n",
       " 20.0,\n",
       " 39.0,\n",
       " 10.0,\n",
       " 1.0,\n",
       " 11.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 2.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 4.0,\n",
       " 19.0,\n",
       " 18.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 30.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 18.0,\n",
       " 4.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 3.0,\n",
       " 7.0,\n",
       " 9.0,\n",
       " 19.0,\n",
       " 3.0,\n",
       " 14.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 7.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 6.0,\n",
       " 22.0,\n",
       " 16.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 13.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 5.0,\n",
       " 4.0,\n",
       " 13.0,\n",
       " 20.0,\n",
       " 3.0,\n",
       " 19.0,\n",
       " 6.0,\n",
       " 30.0,\n",
       " 9.0,\n",
       " 12.0,\n",
       " 12.0,\n",
       " 5.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 5.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 8.0,\n",
       " 17.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 1.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 5.0,\n",
       " 9.0,\n",
       " 4.0,\n",
       " 9.0,\n",
       " 7.0,\n",
       " 22.0,\n",
       " 19.0,\n",
       " 18.0,\n",
       " 41.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 3.0,\n",
       " 29.0,\n",
       " 9.0,\n",
       " 18.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 1.0,\n",
       " 4.0,\n",
       " 2.0,\n",
       " 13.0,\n",
       " 33.0,\n",
       " 8.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 3.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 6.0,\n",
       " 8.0,\n",
       " 13.0,\n",
       " 29.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 6.0,\n",
       " 32.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 30.0,\n",
       " 40.0,\n",
       " 21.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 40.0,\n",
       " 20.0,\n",
       " 15.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 19.0,\n",
       " 15.0,\n",
       " 9.0,\n",
       " 2.0,\n",
       " 21.0,\n",
       " 18.0,\n",
       " 23.0,\n",
       " 9.0,\n",
       " 18.0,\n",
       " 8.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 4.0,\n",
       " 10.0,\n",
       " 2.0,\n",
       " 9.0,\n",
       " 8.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 7.0,\n",
       " 30.0,\n",
       " 6.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 2.0,\n",
       " 1.0,\n",
       " 16.0,\n",
       " 2.0,\n",
       " 4.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 25.0,\n",
       " 2.0,\n",
       " 26.0,\n",
       " 22.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 12.0,\n",
       " 7.0,\n",
       " 2.0,\n",
       " 8.0,\n",
       " 24.0,\n",
       " 22.0,\n",
       " 10.0,\n",
       " 35.0,\n",
       " 10.0,\n",
       " 30.0,\n",
       " 2.0,\n",
       " 19.0,\n",
       " 3.0,\n",
       " 28.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 12.0,\n",
       " 17.0,\n",
       " 4.0,\n",
       " 7.0,\n",
       " 19.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 30.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 22.0,\n",
       " 12.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 1.0,\n",
       " 9.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 20.0,\n",
       " 2.0,\n",
       " 3.0,\n",
       " 3.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 2.0,\n",
       " 30.0,\n",
       " 19.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 5.0,\n",
       " 23.0,\n",
       " 6.0,\n",
       " 2.0,\n",
       " 15.0,\n",
       " 19.0,\n",
       " 30.0,\n",
       " 16.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 3.0,\n",
       " 16.0,\n",
       " 26.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 30.0,\n",
       " 3.0,\n",
       " 30.0,\n",
       " 24.0,\n",
       " 3.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 18.0,\n",
       " 8.0,\n",
       " 1.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 2.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 18.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 28.0,\n",
       " 20.0,\n",
       " 12.0,\n",
       " 22.0,\n",
       " 23.0,\n",
       " 10.0,\n",
       " 13.0,\n",
       " 18.0,\n",
       " 10.0,\n",
       " 16.0,\n",
       " 13.0,\n",
       " 10.0,\n",
       " 58.0,\n",
       " 20.0,\n",
       " 8.0,\n",
       " 15.0,\n",
       " 30.0,\n",
       " 30.0,\n",
       " 24.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 19.0,\n",
       " 9.0,\n",
       " 45.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 27.0,\n",
       " 4.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 10.0,\n",
       " 23.0,\n",
       " 9.0,\n",
       " 5.0,\n",
       " 35.0,\n",
       " 8.0,\n",
       " 20.0,\n",
       " 1.0,\n",
       " 19.0,\n",
       " 5.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 7.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 23.0,\n",
       " 30.0,\n",
       " 2.0,\n",
       " 20.0,\n",
       " 19.0,\n",
       " 1.0,\n",
       " 6.0,\n",
       " 1.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 1.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 4.0,\n",
       " 11.0,\n",
       " 6.0,\n",
       " 18.0,\n",
       " 20.0,\n",
       " 29.0,\n",
       " 18.0,\n",
       " 7.0,\n",
       " 30.0,\n",
       " 2.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 20.0,\n",
       " 6.0,\n",
       " 8.0,\n",
       " 18.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 3.0,\n",
       " 20.0,\n",
       " 30.0,\n",
       " 35.0,\n",
       " 17.0,\n",
       " 9.0,\n",
       " 29.0,\n",
       " 6.0,\n",
       " 18.0,\n",
       " 3.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 14.0,\n",
       " 9.0,\n",
       " 5.0,\n",
       " 8.0,\n",
       " 30.0,\n",
       " 21.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 38.0,\n",
       " 10.0,\n",
       " 25.0,\n",
       " 20.0,\n",
       " 2.0,\n",
       " 19.0,\n",
       " 8.0,\n",
       " 7.0,\n",
       " 5.0,\n",
       " 10.0,\n",
       " 16.0,\n",
       " 19.0,\n",
       " 29.0,\n",
       " 8.0,\n",
       " 7.0,\n",
       " 12.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 6.0,\n",
       " 3.0,\n",
       " 9.0,\n",
       " 24.0,\n",
       " 9.0,\n",
       " 4.0,\n",
       " 19.0,\n",
       " 7.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 13.0,\n",
       " 18.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 8.0,\n",
       " 2.0,\n",
       " 9.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 3.0,\n",
       " 20.0,\n",
       " 12.0,\n",
       " 11.0,\n",
       " 27.0,\n",
       " 46.0,\n",
       " 3.0,\n",
       " 9.0,\n",
       " 2.0,\n",
       " 5.0,\n",
       " 6.0,\n",
       " 2.0,\n",
       " 1.0,\n",
       " 10.0,\n",
       " 16.0,\n",
       " 40.0,\n",
       " 19.0,\n",
       " 2.0,\n",
       " 27.0,\n",
       " 22.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 2.0,\n",
       " 21.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 9.0,\n",
       " 26.0,\n",
       " 5.0,\n",
       " 24.0,\n",
       " 4.0,\n",
       " 17.0,\n",
       " 17.0,\n",
       " 4.0,\n",
       " 7.0,\n",
       " 9.0,\n",
       " 5.0,\n",
       " 18.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 30.0,\n",
       " 19.0,\n",
       " 16.0,\n",
       " 6.0,\n",
       " 19.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 17.0,\n",
       " 19.0,\n",
       " 3.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 15.0,\n",
       " 3.0,\n",
       " 7.0,\n",
       " 30.0,\n",
       " 19.0,\n",
       " 2.0,\n",
       " 28.0,\n",
       " 7.0,\n",
       " 15.0,\n",
       " 3.0,\n",
       " 30.0,\n",
       " 10.0,\n",
       " 13.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 3.0,\n",
       " 1.0,\n",
       " 21.0,\n",
       " 14.0,\n",
       " 15.0,\n",
       " 11.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 29.0,\n",
       " 6.0,\n",
       " 12.0,\n",
       " 4.0,\n",
       " 20.0,\n",
       " 1.0,\n",
       " 30.0,\n",
       " 6.0,\n",
       " 19.0,\n",
       " 2.0,\n",
       " 5.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 8.0,\n",
       " 2.0,\n",
       " 10.0,\n",
       " 18.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 3.0,\n",
       " 20.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 5.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 17.0,\n",
       " 2.0,\n",
       " 10.0,\n",
       " 18.0,\n",
       " 1.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 31.0,\n",
       " 8.0,\n",
       " 19.0,\n",
       " 8.0,\n",
       " 19.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 13.0,\n",
       " 7.0,\n",
       " 15.0,\n",
       " 7.0,\n",
       " 5.0,\n",
       " 9.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 9.0,\n",
       " 11.0,\n",
       " 20.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 4.0,\n",
       " 4.0,\n",
       " 2.0,\n",
       " 17.0,\n",
       " 4.0,\n",
       " 8.0,\n",
       " 26.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 40.0,\n",
       " 2.0,\n",
       " 9.0,\n",
       " 15.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 1.0,\n",
       " 20.0,\n",
       " 16.0,\n",
       " 8.0,\n",
       " 18.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 16.0,\n",
       " 9.0,\n",
       " 18.0,\n",
       " 39.0,\n",
       " 10.0,\n",
       " 21.0,\n",
       " 20.0,\n",
       " 16.0,\n",
       " 19.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 13.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 8.0,\n",
       " 3.0,\n",
       " 17.0,\n",
       " 4.0,\n",
       " 2.0,\n",
       " 6.0,\n",
       " 6.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 15.0,\n",
       " 6.0,\n",
       " 24.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 38.0,\n",
       " 30.0,\n",
       " 9.0,\n",
       " 8.0,\n",
       " 2.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 18.0,\n",
       " 9.0,\n",
       " 5.0,\n",
       " 41.0,\n",
       " 6.0,\n",
       " 11.0,\n",
       " 4.0,\n",
       " 16.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 21.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 1.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 30.0,\n",
       " 42.0,\n",
       " 49.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 18.0,\n",
       " 9.0,\n",
       " 19.0,\n",
       " 22.0,\n",
       " 20.0,\n",
       " 29.0,\n",
       " 19.0,\n",
       " 1.0,\n",
       " 4.0,\n",
       " 20.0,\n",
       " 22.0,\n",
       " 16.0,\n",
       " 29.0,\n",
       " 6.0,\n",
       " 3.0,\n",
       " 17.0,\n",
       " 3.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 8.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 9.0,\n",
       " 7.0,\n",
       " 8.0,\n",
       " 2.0,\n",
       " 20.0,\n",
       " 27.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 18.0,\n",
       " 9.0,\n",
       " 2.0,\n",
       " 10.0,\n",
       " 17.0,\n",
       " 14.0,\n",
       " 20.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 16.0,\n",
       " 12.0,\n",
       " 9.0,\n",
       " 21.0,\n",
       " 34.0,\n",
       " 20.0,\n",
       " 14.0,\n",
       " 2.0,\n",
       " 4.0,\n",
       " 7.0,\n",
       " 5.0,\n",
       " 17.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 30.0,\n",
       " 7.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 9.0,\n",
       " 9.0,\n",
       " 3.0,\n",
       " 49.0,\n",
       " 10.0,\n",
       " 1.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 19.0,\n",
       " 5.0,\n",
       " 1.0,\n",
       " 16.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 10.0,\n",
       " 7.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 3.0,\n",
       " 9.0,\n",
       " 14.0,\n",
       " 4.0,\n",
       " 15.0,\n",
       " 1.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 6.0,\n",
       " 11.0,\n",
       " 5.0,\n",
       " 4.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 4.0,\n",
       " 29.0,\n",
       " 20.0,\n",
       " 1.0,\n",
       " 10.0,\n",
       " 17.0,\n",
       " 23.0,\n",
       " 18.0,\n",
       " 7.0,\n",
       " 28.0,\n",
       " 17.0,\n",
       " 23.0,\n",
       " 21.0,\n",
       " 5.0,\n",
       " 23.0,\n",
       " 16.0,\n",
       " 7.0,\n",
       " 7.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 25.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 12.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 29.0,\n",
       " 11.0,\n",
       " 30.0,\n",
       " 30.0,\n",
       " 2.0,\n",
       " 9.0,\n",
       " 20.0,\n",
       " 2.0,\n",
       " 7.0,\n",
       " 10.0,\n",
       " 10.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 39.0,\n",
       " 7.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 2.0,\n",
       " 8.0,\n",
       " 30.0,\n",
       " 20.0,\n",
       " 29.0,\n",
       " 2.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 2.0,\n",
       " 22.0,\n",
       " 4.0,\n",
       " 9.0,\n",
       " 18.0,\n",
       " 10.0,\n",
       " 5.0,\n",
       " 20.0,\n",
       " 6.0,\n",
       " 9.0,\n",
       " 5.0,\n",
       " 5.0,\n",
       " 19.0,\n",
       " 1.0,\n",
       " 13.0,\n",
       " 1.0,\n",
       " 5.0,\n",
       " 50.0,\n",
       " 29.0,\n",
       " 7.0,\n",
       " 2.0,\n",
       " 9.0,\n",
       " 29.0,\n",
       " 3.0,\n",
       " 35.0,\n",
       " 10.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 29.0,\n",
       " 9.0,\n",
       " 8.0,\n",
       " 9.0,\n",
       " 13.0,\n",
       " 38.0,\n",
       " 24.0,\n",
       " 3.0,\n",
       " 9.0,\n",
       " 3.0,\n",
       " 9.0,\n",
       " 4.0,\n",
       " 20.0,\n",
       " 5.0,\n",
       " 20.0,\n",
       " 30.0,\n",
       " 29.0,\n",
       " 13.0,\n",
       " 7.0,\n",
       " 24.0,\n",
       " 8.0,\n",
       " 20.0,\n",
       " 24.0,\n",
       " 20.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 20.0,\n",
       " 9.0,\n",
       " 3.0,\n",
       " 19.0,\n",
       " 6.0,\n",
       " 19.0,\n",
       " 13.0,\n",
       " 11.0,\n",
       " 30.0,\n",
       " 7.0,\n",
       " 20.0,\n",
       " 3.0,\n",
       " 20.0,\n",
       " 24.0,\n",
       " 20.0,\n",
       " 4.0,\n",
       " 5.0,\n",
       " 19.0,\n",
       " 10.0,\n",
       " 6.0,\n",
       " 20.0,\n",
       " 30.0,\n",
       " 15.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 10.0,\n",
       " 29.0,\n",
       " 20.0,\n",
       " 3.0,\n",
       " 2.0,\n",
       " 9.0,\n",
       " 19.0,\n",
       " 9.0,\n",
       " 13.0,\n",
       " 20.0,\n",
       " 7.0,\n",
       " 5.0,\n",
       " 13.0,\n",
       " 25.0,\n",
       " 8.0,\n",
       " 10.0,\n",
       " 9.0,\n",
       " 5.0,\n",
       " 7.0,\n",
       " 9.0,\n",
       " ...]"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111,projection='3d')\n",
    "ax.scatter(x, y, z)\n",
    "\n",
    "ax.set_xlabel('Neuron coverage')\n",
    "ax.set_ylabel('Divergence')\n",
    "ax.set_zlabel('Mutation degree')\n",
    "plt.savefig(\"./distribution.png\")\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy1 = 0\n",
    "accuracy2 = 0\n",
    "accuracy3 = 0\n",
    "image_dir1 = './results/0/'\n",
    "image_dir2 = './results/1/'\n",
    "image_dir3 = './results/4/'\n",
    "image_dir4 = './results/5/'\n",
    "file_names1 = [f for f in listdir(image_dir1) if isfile(join(image_dir1, f)) and '.png' in f]\n",
    "file_names2 = [f for f in listdir(image_dir2) if isfile(join(image_dir2, f)) and '.png' in f]\n",
    "file_names3 = [f for f in listdir(image_dir3) if isfile(join(image_dir3, f)) and '.png' in f]\n",
    "file_names4 = [f for f in listdir(image_dir4) if isfile(join(image_dir4, f)) and '.png' in f]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import numpy as np\n",
    "import cv2\n",
    "import numpy as np\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "for file in file_names1:\n",
    "    image = cv2.imread(image_dir1+file)\n",
    "    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    input_x = np.zeros((1,28,28,1))\n",
    "    input_x[0,...] = gray_image.reshape(28,28,1)\n",
    "    true_label = file.split('_')[5].split('.')[0]\n",
    "    label1 = np.argmax(model1.predict(input_x))\n",
    "    label2 = np.argmax(model2.predict(input_x))\n",
    "    label3 = np.argmax(model3.predict(input_x))\n",
    "    if int(true_label)==int(label1):\n",
    "        dui1 = dui1+1\n",
    "    if int(true_label)==int(label2):\n",
    "        dui2 = dui2+1\n",
    "    if int(true_label)==int(label3):\n",
    "        dui3 = dui3+1\n",
    "for file in file_names2:\n",
    "    image = cv2.imread(image_dir2+file)\n",
    "    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    input_x = np.zeros((1,28,28,1))\n",
    "    input_x[0,...] = gray_image.reshape(28,28,1)\n",
    "    true_label = file.split('_')[5].split('.')[0]\n",
    "    label1 = np.argmax(model1.predict(input_x))\n",
    "    label2 = np.argmax(model2.predict(input_x))\n",
    "    label3 = np.argmax(model3.predict(input_x))\n",
    "    if int(true_label)==int(label1):\n",
    "        dui1 = dui1+1\n",
    "    if int(true_label)==int(label2):\n",
    "        dui2 = dui2+1\n",
    "    if int(true_label)==int(label3):\n",
    "        dui3 = dui3+1\n",
    "for file in file_names3:\n",
    "    image = cv2.imread(image_dir3+file)\n",
    "    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    input_x = np.zeros((1,28,28,1))\n",
    "    input_x[0,...] = gray_image.reshape(28,28,1)\n",
    "    true_label = file.split('_')[5].split('.')[0]\n",
    "    label1 = np.argmax(model1.predict(input_x))\n",
    "    label2 = np.argmax(model2.predict(input_x))\n",
    "    label3 = np.argmax(model3.predict(input_x))\n",
    "    if int(true_label)==int(label1):\n",
    "        dui1 = dui1+1\n",
    "    if int(true_label)==int(label2):\n",
    "        dui2 = dui2+1\n",
    "    if int(true_label)==int(label3):\n",
    "        dui3 = dui3+1\n",
    "for file in file_names4:\n",
    "    image = cv2.imread(image_dir4+file)\n",
    "    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    input_x = np.zeros((1,28,28,1))\n",
    "    input_x[0,...] = gray_image.reshape(28,28,1)\n",
    "    true_label = file.split('_')[5].split('.')[0]\n",
    "    label1 = np.argmax(model1.predict(input_x))\n",
    "    label2 = np.argmax(model2.predict(input_x))\n",
    "    label3 = np.argmax(model3.predict(input_x))\n",
    "    if int(true_label)==int(label1):\n",
    "        dui1 = dui1+1\n",
    "    if int(true_label)==int(label2):\n",
    "        dui2 = dui2+1\n",
    "    if int(true_label)==int(label3):\n",
    "        dui3 = dui3+1\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9422602401710808"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy1/6079"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9749958874814937"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy2/6079"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9672643526895871"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy3/6079"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
